{"version":3,"file":"static/js/852.edc1207a.chunk.js","mappings":"uJAGaA,E,QAAoDC,I,gKCFjE,EAA+B,oEAA/B,EAA2G,sDAA3G,EAA0K,0DAA1K,EAAgR,gCAAhR,EAAiU,yCAAjU,EAA2X,yCAA3X,EAAmb,mE,SCwGnb,EA/F6B,WACzB,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWJ,EAAAA,EAAAA,IAAiB,SAAAK,GAAK,OAAIA,EAAMD,YAC3CE,GAAWC,EAAAA,EAAAA,MACjB,GAA4CC,EAAAA,EAAAA,UAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAgDF,EAAAA,EAAAA,UAAS,GAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KAGMC,EAAwB,kBAC1BC,EAAAA,EAAAA,KACIC,EAAAA,EAAAA,IAAmBN,EAAgBE,GACnCP,IAsBR,OAnBAY,EAAAA,EAAAA,YAAU,WACNN,EAAkBN,EAASK,kBAC5B,CAACL,EAASK,kBACbO,EAAAA,EAAAA,YAAU,WACNJ,EAAoBR,EAASO,oBAC9B,CAACP,EAASO,oBAeT,iBAAKM,UAAWC,EAAhB,WACI,4BACI,eAAID,UAAWC,EAAf,uBACA,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,uBACA,iBAAKD,UAAWC,EAAhB,WACI,kBACIC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,MAAOb,EACPc,SAAU,SAAAC,GAAK,OACXd,GAAmBc,EAAMC,OAAOH,WAGxC,gBAAKL,UAAWC,EAAhB,SACKT,WAIb,iBAAKQ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,oCAGA,iBAAKD,UAAWC,EAAhB,WACI,kBACIC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,MAAOX,EACPY,SAAU,SAAAC,GAAK,OACXZ,GAAqBY,EAAMC,OAAOH,WAG1C,gBAAKL,UAAWC,EAAhB,SACKP,cAKjB,mBACIM,UAAWC,EACXQ,QAvDZ,WACIpB,GAASqB,EAAAA,EAAAA,QAuDDC,UAtEmBd,EAAAA,EAAAA,IAAae,EAAAA,EAAiBzB,GAmErD,sBAOA,mBACIa,UAAWC,EACXQ,QA1DZ,WACI,IAAMI,EAAc,CAChBrB,eAAgBA,EAChBE,iBAAkBA,GAEtBL,GAASyB,EAAAA,EAAAA,IAAYD,KAsDbF,SAAUf,IAHd,oBAOA,mBAAQI,UAAWC,EAAeQ,QAASxB,EAA3C,SACMW,IAAqC,OAAX,gB,2OC/F/BmB,EAAW,SAACC,GAAD,MAAqC,CACzDd,KAAMe,EAAAA,EAAAA,UACND,QAASA,IAEAE,EAAc,iBAAoB,CAC3ChB,KAAMe,EAAAA,EAAAA,aACND,aAASG,IAEAC,EAAY,SAACJ,GAAD,MAAqC,CAC1Dd,KAAMe,EAAAA,EAAAA,WACND,QAASA,IAgBAK,EAAc,SAACL,GAAD,MAAiC,CACxDd,KAAMe,EAAAA,EAAAA,aACND,QAASA,IAgBAM,EAAU,SAACN,GAAD,MAAqC,CACxDd,KAAMe,EAAAA,EAAAA,SACND,QAASA,IAEAO,EAAa,SAACP,GAAD,MAAiC,CACvDd,KAAMe,EAAAA,EAAAA,YACND,QAASA,IAIAN,EAAgB,iBAAuB,CAChDR,KAAMsB,EAAAA,EAAAA,iBACNR,aAASG,IAEAL,EAAc,SAACE,GAAD,MAA4C,CACnEd,KAAMsB,EAAAA,EAAAA,YACNR,QAASA","sources":["hooks/useTypedSelector.ts","webpack://points-client/./src/pages/MainMenu/Settings/MainMenuSettings.module.css?0aa3","pages/MainMenu/Settings/MainMenuSettings.tsx","store/actionCreator.ts"],"sourcesContent":["import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"page_wrapper\":\"MainMenuSettings_page_wrapper__kXkeO MainMenu_page_wrapper__2YKGi\",\"title\":\"MainMenuSettings_title__iSK9- MainMenu_title__iOdtM\",\"button\":\"MainMenuSettings_button__idxjX components_button__6uL8D\",\"row\":\"MainMenuSettings_row__BIJ4V\",\"block\":\"MainMenuSettings_block__UtEpN\",\"interval_title\":\"MainMenuSettings_interval_title__VVTR9\",\"interval_value\":\"MainMenuSettings_interval_value__1FK7u\",\"interval_row\":\"MainMenuSettings_interval_row__r9Tex MainMenuSettings_row__BIJ4V\"};","import { FC, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\r\nimport { objectEquals } from '../../../functions/common';\r\nimport { createGameSettings } from '../../../functions/create';\r\nimport { resetSettings, setSettings } from '../../../store/actionCreator';\r\nimport { defaultSettings } from '../../../store/reducers/gameSettingReducer';\r\nimport styles from './MainMenuSettings.module.css';\r\n\r\nconst MainMenuSettings: FC = () => {\r\n    const { goBack } = useHistory();\r\n    const settings = useTypedSelector(state => state.settings);\r\n    const dispatch = useDispatch();\r\n    const [botMovingDelay, setBotMovingDelay] = useState(0);\r\n    const [cellCloningDelay, setCellCloningDelay] = useState(0);\r\n\r\n    const isDefaultSetting = () => objectEquals(defaultSettings, settings);\r\n    const existUnappliedChanges = () =>\r\n        objectEquals(\r\n            createGameSettings(botMovingDelay, cellCloningDelay),\r\n            settings\r\n        );\r\n        \r\n    useEffect(() => {\r\n        setBotMovingDelay(settings.botMovingDelay);\r\n    }, [settings.botMovingDelay]);\r\n    useEffect(() => {\r\n        setCellCloningDelay(settings.cellCloningDelay);\r\n    }, [settings.cellCloningDelay]);\r\n\r\n    function resetToDefault() {\r\n        dispatch(resetSettings());\r\n    }\r\n\r\n    function applyChanges() {\r\n        const newSettings = {\r\n            botMovingDelay: botMovingDelay,\r\n            cellCloningDelay: cellCloningDelay\r\n        };\r\n        dispatch(setSettings(newSettings));\r\n    }\r\n\r\n    return (\r\n        <div className={styles.page_wrapper}>\r\n            <div>\r\n                <h2 className={styles.title}>Settings</h2>\r\n                <div className={styles.block}>\r\n                    <div className={styles.interval_title}>AI delay</div>\r\n                    <div className={styles.interval_row}>\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max=\"500\"\r\n                            value={botMovingDelay}\r\n                            onChange={event =>\r\n                                setBotMovingDelay(+event.target.value)\r\n                            }\r\n                        />\r\n                        <div className={styles.interval_value}>\r\n                            {botMovingDelay}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.block}>\r\n                    <div className={styles.interval_title}>\r\n                        Clone animation delay\r\n                    </div>\r\n                    <div className={styles.interval_row}>\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max=\"500\"\r\n                            value={cellCloningDelay}\r\n                            onChange={event =>\r\n                                setCellCloningDelay(+event.target.value)\r\n                            }\r\n                        />\r\n                        <div className={styles.interval_value}>\r\n                            {cellCloningDelay}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button\r\n                className={styles.button}\r\n                onClick={resetToDefault}\r\n                disabled={isDefaultSetting()}\r\n            >\r\n                Default\r\n            </button>\r\n            <button\r\n                className={styles.button}\r\n                onClick={applyChanges}\r\n                disabled={existUnappliedChanges()}\r\n            >\r\n                Apply\r\n            </button>\r\n            <button className={styles.button} onClick={goBack}>\r\n                {!existUnappliedChanges() ? 'Cancel' : 'Back'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainMenuSettings;\r\n","import { RootState } from '.';\r\nimport { GameActions, GameActionType, playerMoving, SettingActions, SettingActionType } from './types';\r\n\r\n// common\r\nexport const loadGame = (payload: SaveData): GameActions => ({\r\n    type: GameActionType.LOAD_GAME,\r\n    payload: payload\r\n});\r\nexport const restartGame = (): GameActions => ({\r\n    type: GameActionType.RESTART_GAME,\r\n    payload: undefined\r\n});\r\nexport const startGame = (payload: GameForm): GameActions => ({\r\n    type: GameActionType.START_GAME,\r\n    payload: payload\r\n});\r\n\r\n// gameFieldReducer\r\nexport const cellIncrement = (payload: number): GameActions => ({\r\n    type: GameActionType.CELL_INCREMENT,\r\n    payload: payload\r\n});\r\nexport const cellZeroing = (payload: number): GameActions => ({\r\n    type: GameActionType.CELL_ZEROING,\r\n    payload: payload\r\n});\r\nexport const cellCapture = (payload: playerMoving): GameActions => ({\r\n    type: GameActionType.CELL_CAPTURE,\r\n    payload: payload\r\n});\r\nexport const CellCloning = (payload: Cell): GameActions => ({\r\n    type: GameActionType.CELL_CLONING,\r\n    payload: payload\r\n});\r\n\r\n// gameStateReducer\r\nexport const nextMover = (payload: Cell[][]): GameActions => ({\r\n    type: GameActionType.NEXT_MOVER,\r\n    payload: payload\r\n});\r\nexport const blockMoving = (): GameActions => ({\r\n    type: GameActionType.BLOCK_MOVING,\r\n    payload: undefined\r\n});\r\nexport const allowMoving = (): GameActions => ({\r\n    type: GameActionType.ALLOW_MOVING,\r\n    payload: undefined\r\n});\r\nexport const newMove = (payload: Cell[][]): GameActions => ({\r\n    type: GameActionType.NEW_MOVE,\r\n    payload: payload\r\n});\r\nexport const playerMove = (payload: Cell): GameActions => ({\r\n    type: GameActionType.PLAYER_MOVE,\r\n    payload: payload\r\n});\r\n\r\n// gameSettingReducer\r\nexport const resetSettings = (): SettingActions => ({\r\n    type: SettingActionType.RESET_TO_DEFAULT,\r\n    payload: undefined\r\n});\r\nexport const setSettings = (payload: GameSettings): SettingActions => ({\r\n    type: SettingActionType.SET_SETTING,\r\n    payload: payload\r\n});\r\n"],"names":["useTypedSelector","useSelector","goBack","useHistory","settings","state","dispatch","useDispatch","useState","botMovingDelay","setBotMovingDelay","cellCloningDelay","setCellCloningDelay","existUnappliedChanges","objectEquals","createGameSettings","useEffect","className","styles","type","min","max","value","onChange","event","target","onClick","resetSettings","disabled","defaultSettings","newSettings","setSettings","loadGame","payload","GameActionType","restartGame","undefined","startGame","CellCloning","newMove","playerMove","SettingActionType"],"sourceRoot":""}