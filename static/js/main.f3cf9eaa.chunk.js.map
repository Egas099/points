{"version":3,"sources":["types/index.ts","hooks/useTypedSelector.ts","data/index.ts","store/types/index.ts","logic/index.ts","store/gameReducer.ts","components/Cell/CellItem.tsx","components/GameField/GameField.tsx","App.tsx","store/index.ts","index.tsx","components/Cell/CellItem.module.css","components/GameField/GameField.module.css"],"names":["Player","useTypedSelector","useSelector","GameActionType","spawnPoints","x","y","player","red","blue","fieldSize","cloneCell","state","dispatch","cell","calcCellPositionById","id","cellZeroing","field","cellIncAndCapture","cellCapture","cellId","cellIncrement","number","Math","floor","getNextMover","createCell","count","undefined","placeSpawnPoint","newField","forEach","spawn","defaultState","size","Array","fill","map","a","i","b","j","mover","payload","type","CELL_INCREMENT","CELL_ZEROING","CELL_CAPTURE","actionCellCapture","action","newState","actionCellIncrement","actionCellZeroing","CellItem","useDispatch","game","className","styles","wrapper","draggable","content","none","getColorClass","join","onClick","NEXT_MOVER","GameField","row","random","App","useEffect","checkCellsToOverflow","RESTART_GAME","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f3cf9eaa.chunk.js","sourcesContent":["export enum Player {\n    red, blue,\n}","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import { Player } from '../types';\n\nexport const spawnPoints: SpawnPoint[] = [\n    { x: 1, y: 1, player: Player.red },\n    { x: 3, y: 3, player: Player.blue },\n];\n\nexport const fieldSize = { x: 5, y: 5 }\n\n// export const fieldTemplates = [\n//     {\n//         size: { x: 5, y: 5 },\n//         spawns: [\n//             { x: 1, y: 1, player: Player.blue },\n//             { x: 2, y: 2, player: Player.red },\n//         ]\n//     }\n// ]","import { Player } from '../../types';\n\nexport enum GameActionType {\n    CELL_CAPTURE = 'CELL_CAPTURE',\n    CELL_INCREMENT = 'CELL_INCREMENT',\n    CELL_ZEROING = 'CELL_ZEROING',\n    NEXT_MOVER = 'NEXT_MOVER',\n    RESTART_GAME = 'RESTART_GAME',\n    CHANGE_TITLE = 'CHANGE_TITLE',\n}\n\n/**\n * Interfaces of actions\n */\n\nexport interface CellCapture {\n    type: GameActionType.CELL_CAPTURE;\n    payload: playerMoving;\n}\nexport interface CellIncrement {\n    type: GameActionType.CELL_INCREMENT;\n    payload: number;\n}\nexport interface CellZeroing {\n    type: GameActionType.CELL_ZEROING;\n    payload: number;\n}\nexport interface NextMover {\n    type: GameActionType.NEXT_MOVER;\n    payload: undefined;\n}\nexport interface RestartGame {\n    type: GameActionType.RESTART_GAME;\n    payload: undefined;\n}\n\nexport interface ChangeTitle {\n    type: GameActionType.CHANGE_TITLE;\n    payload: string;\n}\n\nexport type GameActions = CellZeroing\n    | RestartGame\n    | ChangeTitle\n    | CellIncrement\n    | NextMover\n    | CellCapture;\n\nexport interface playerMoving {\n    cellId: number;\n    player: Player;\n}","import { Dispatch } from 'react';\nimport { fieldSize } from '../data';\nimport { cellCapture, cellIncrement, cellZeroing } from '../store/gameReducer';\nimport { Player } from '../types';\n\nexport const checkCellsToOverflow = (state: GameState, dispatch: Dispatch<any>) => {\n    state.field.forEach((row) => {\n        row.forEach((cell) => {\n            if (cell.count > 3)\n                cloneCell(state, dispatch, cell)\n        })\n    })\n}\n\nconst cloneCell = (state: GameState, dispatch: Dispatch<any>, cell: Cell) => {\n    const player = cell.player;\n    const [x, y] = calcCellPositionById(cell.id);\n    dispatch(cellZeroing(state.field[y][x].id));\n\n    if (y + 1 < fieldSize.y)\n        cellIncAndCapture(dispatch, state.field[y + 1][x].id, player)\n\n    if (x + 1 < fieldSize.x)\n        cellIncAndCapture(dispatch, state.field[y][x + 1].id, player)\n\n    if (y - 1 >= 0)\n        cellIncAndCapture(dispatch, state.field[y - 1][x].id, player)\n\n    if (x - 1 >= 0)\n        cellIncAndCapture(dispatch, state.field[y][x - 1].id, player)\n}\n\nconst cellIncAndCapture = (dispatch: Dispatch<any>, id: number, player: Player) => {\n    dispatch(cellCapture({ cellId: id, player: player }))\n    dispatch(cellIncrement(id));\n}\n\nexport const calcCellPositionById = (number: number) => [number % 10, Math.floor(number / 10)]\n\nexport const getNextMover = (player: Player) => Player[player + 1] ? ++player : 0;\n\nexport const createField = (size: Vector2): Cell[][] => {\n    return new Array(size.y).fill(1).map((a, i) => {\n        return (new Array(size.x).fill(1).map((b, j) => createCell(i * 10 + j)))\n    })\n}\n\nconst createCell = (id: number) => ({ id: id, count: 0, player: undefined })\n\nexport const placeSpawnPoint = (field: Cell[][], spawnPoints: SpawnPoint[]) => {\n    let newField = field;\n    spawnPoints.forEach((spawn) => {\n        newField[spawn.y][spawn.x].player = spawn.player;\n        newField[spawn.y][spawn.x].count = 3;\n    });\n    return newField;\n}","import { fieldSize, spawnPoints } from '../data';\nimport { calcCellPositionById, createField, getNextMover, placeSpawnPoint } from '../logic';\nimport { Player } from '../types';\nimport { CellZeroing, GameActions, GameActionType, CellIncrement, CellCapture, playerMoving } from './types';\n\nconst defaultState = (): GameState => {\n    return { field: placeSpawnPoint(createField(fieldSize), spawnPoints), mover: Player.red }\n}\n\nexport const gameReducer = (state = defaultState(), action: GameActions) => {\n    switch (action.type) {\n        case GameActionType.CELL_CAPTURE:\n            return actionCellCapture(state, action);\n        case GameActionType.CELL_INCREMENT:\n            return actionCellIncrement(state, action);\n        case GameActionType.CELL_ZEROING:\n            return actionCellZeroing(state, action);\n        case GameActionType.NEXT_MOVER:\n            return { ...state, mover: getNextMover(state.mover) };\n        case GameActionType.RESTART_GAME:\n            return defaultState();\n        default:\n            return state;\n    }\n};\n\nexport const cellIncrement = (payload: number): GameActions => ({ type: GameActionType.CELL_INCREMENT, payload: payload })\nexport const cellZeroing = (payload: number): GameActions => ({ type: GameActionType.CELL_ZEROING, payload: payload })\nexport const cellCapture = (payload: playerMoving): GameActions => ({ type: GameActionType.CELL_CAPTURE, payload: payload })\nexport const nextMover = (): GameActions => ({ type: GameActionType.NEXT_MOVER, payload: undefined })\nexport const restartGame = (): GameActions => ({ type: GameActionType.RESTART_GAME, payload: undefined })\n\n\nfunction actionCellCapture(state: GameState, action: CellCapture) {\n    let newState = { ...state };\n    const [x, y] = calcCellPositionById(action.payload.cellId);\n\n    newState.field[y][x].player = action.payload.player;\n\n    return newState;\n}\n\nfunction actionCellIncrement(state: GameState, action: CellIncrement) {\n\n    let newState = { ...state };\n    const [x, y] = calcCellPositionById(action.payload);\n\n    newState.field[y][x].count += 1;\n\n    return newState;\n}\n\n\nfunction actionCellZeroing(state: GameState, action: CellZeroing) {\n    let newState = { ...state };\n    const [x, y] = calcCellPositionById(action.payload);\n\n    newState.field[y][x].count = 0;\n    newState.field[y][x].player = undefined;\n\n    return newState;\n}","import { FC } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { cellIncrement, nextMover } from '../../store/gameReducer';\nimport { Player } from '../../types';\nimport styles from './CellItem.module.css';\n\ninterface Props {\n    cell: Cell;\n}\n\nconst CellItem: FC<Props> = ({ cell }) => {\n    const dispatch = useDispatch();\n    const state = useTypedSelector(state => state.game)\n\n    const getColorClass = (player: Player) => {\n        switch (player) {\n            case undefined: return styles.none;\n            case Player.blue: return styles.blue;\n            case Player.red: return styles.red;\n            default: return '';\n        }\n    }\n\n    const click = () => {\n        if (state.mover === cell.player) {\n            dispatch(cellIncrement(cell.id))\n            dispatch(nextMover());\n        }\n    }\n\n    return (\n        <div className={styles.wrapper} draggable=\"false\">\n            <div\n                className={[styles.content, getColorClass(cell.player)].join(' ')}\n                onClick={click}\n                draggable=\"false\"\n            >\n                {cell.count === 0 ? '' : cell.count}\n            </div>\n        </div>\n    )\n}\n\nexport default CellItem\n","import { FC } from 'react'\nimport CellItem from '../Cell/CellItem'\nimport styles from './GameField.module.css'\n\ninterface Props {\n    field: Cell[][],\n}\n\nconst GameField: FC<Props> = ({ field }) => {\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.content}>\n                {field.map(row => (\n                    <div className={styles.row} key={Math.random()}>\n                        {row.map((cell) => (\n                            <CellItem cell={cell} key={cell.id}></CellItem>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default GameField\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport GameField from './components/GameField/GameField';\nimport './css/App.css';\nimport { useTypedSelector } from './hooks/useTypedSelector';\nimport { checkCellsToOverflow } from './logic';\nimport { restartGame } from './store/gameReducer';\n\nfunction App() {\n    const dispatch = useDispatch()\n    const state = useTypedSelector(state => state.game)\n\n    useEffect(() => checkCellsToOverflow(state, dispatch), [state, dispatch])\n\n    return (\n        <div className=\"App\">\n            <div className=\"App__content\">\n                <GameField field={state.field}></GameField>\n                <button onClick={() => dispatch(restartGame())}>Restart</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { gameReducer } from './gameReducer';\n\nconst rootReducer = combineReducers({\n    game: gameReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools());\n\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CellItem_wrapper__1__Uv\",\"content\":\"CellItem_content__39sOt\",\"none\":\"CellItem_none__rZh4b\",\"blue\":\"CellItem_blue__2JvrQ\",\"green\":\"CellItem_green__2RAp7\",\"yellow\":\"CellItem_yellow__1S6xu\",\"red\":\"CellItem_red__2okIZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameField_wrapper__2CTQv\",\"content\":\"GameField_content__1KzUx\",\"row\":\"GameField_row__3MZHc\"};"],"sourceRoot":""}