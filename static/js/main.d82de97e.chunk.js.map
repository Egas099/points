{"version":3,"sources":["components/GameField/GameField.module.css","components/Cell/CellItem.module.css","types/index.ts","hooks/useTypedSelector.ts","data/index.ts","store/types/index.ts","logic/index.ts","store/gameReducer.ts","components/Cell/CellItem.tsx","components/GameField/GameField.tsx","App.tsx","store/index.ts","index.tsx"],"names":["module","exports","Player","useTypedSelector","useSelector","GameActionType","spawnPoints","x","y","player","red","orange","green","blue","fieldSize","checkCellsToOverflow","state","dispatch","cell","findOverflowCells","field","cloneCell","setTimeout","nextMover","allowMoving","find","count","calcCellPositionById","id","cellZeroing","cellIncAndCapture","cellCapture","cellId","cellIncrement","number","Math","floor","playerIsExistOnGameField","createCell","undefined","placeSpawnPoint","newField","forEach","spawn","defaultState","size","Array","fill","map","a","i","b","j","mover","moveBlock","players","getPlayers","yellow","payload","type","CELL_INCREMENT","CELL_ZEROING","CELL_CAPTURE","NEXT_MOVER","ALLOW_MOVING","actionCellCapture","action","newState","actionCellIncrement","actionCellZeroing","actionNextMover","leftPlayers","curI","indexOf","length","splice","CellItem","useDispatch","game","className","styles","wrapper","join","draggable","content","none","getColorClass","onClick","BLOCK_MOVING","createPoints","GameField","row","random","App","useEffect","RESTART_GAME","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d82de97e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameField_wrapper__2CTQv\",\"content\":\"GameField_content__1KzUx\",\"row\":\"GameField_row__3MZHc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CellItem_wrapper__1__Uv\",\"content\":\"CellItem_content__39sOt\",\"none\":\"CellItem_none__rZh4b\",\"red\":\"CellItem_red__2okIZ\",\"orange\":\"CellItem_orange__2RM0N\",\"yellow\":\"CellItem_yellow__1S6xu\",\"green\":\"CellItem_green__2RAp7\",\"blue\":\"CellItem_blue__2JvrQ\",\"mover\":\"CellItem_mover__Kw84x\"};","export enum Player {\r\n    red,\r\n    orange,\r\n    yellow,\r\n    green,\r\n    blue,\r\n}","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import { Player } from '../types';\r\n\r\nexport const spawnPoints: SpawnPoint[] = [\r\n    { x: 1, y: 1, player: Player.red },\r\n    { x: 6, y: 1, player: Player.orange },\r\n    { x: 6, y: 6, player: Player.green },\r\n    { x: 1, y: 6, player: Player.blue },\r\n];\r\n\r\nexport const fieldSize = { x: 8, y: 8 }\r\n\r\n// export const fieldTemplates = [\r\n//     {\r\n//         size: { x: 10, y: 10 },\r\n//         spawns: [\r\n//             { x: 1, y: 1, player: Player.blue },\r\n//             { x: 2, y: 2, player: Player.red },\r\n\r\n//         ]\r\n//     }\r\n// ]","import { Player } from '../../types';\r\n\r\nexport enum GameActionType {\r\n    CELL_CAPTURE = 'CELL_CAPTURE',\r\n    CELL_INCREMENT = 'CELL_INCREMENT',\r\n    CELL_ZEROING = 'CELL_ZEROING',\r\n    BLOCK_MOVING = 'BLOCK_MOVING',\r\n    ALLOW_MOVING = 'ALLOW_MOVING',\r\n    NEXT_MOVER = 'NEXT_MOVER',\r\n    RESTART_GAME = 'RESTART_GAME',\r\n}\r\n\r\n/**\r\n * Interfaces of actions\r\n */\r\n\r\nexport interface CellCapture {\r\n    type: GameActionType.CELL_CAPTURE;\r\n    payload: playerMoving;\r\n}\r\nexport interface CellIncrement {\r\n    type: GameActionType.CELL_INCREMENT;\r\n    payload: number;\r\n}\r\nexport interface CellZeroing {\r\n    type: GameActionType.CELL_ZEROING;\r\n    payload: number;\r\n}\r\n\r\nexport interface BlockMoving {\r\n    type: GameActionType.BLOCK_MOVING;\r\n    payload: undefined;\r\n}\r\n\r\nexport interface AllowMoving {\r\n    type: GameActionType.ALLOW_MOVING;\r\n    payload: undefined;\r\n}\r\nexport interface NextMover {\r\n    type: GameActionType.NEXT_MOVER;\r\n    payload: undefined;\r\n}\r\nexport interface RestartGame {\r\n    type: GameActionType.RESTART_GAME;\r\n    payload: undefined;\r\n}\r\n\r\nexport type GameActions = CellZeroing\r\n    | RestartGame\r\n    | CellIncrement\r\n    | NextMover\r\n    | CellCapture\r\n    | BlockMoving\r\n    | AllowMoving;\r\n\r\nexport interface playerMoving {\r\n    cellId: number;\r\n    player: Player;\r\n}","import { Dispatch } from 'react';\r\nimport { fieldSize } from '../data';\r\nimport { allowMoving, cellCapture, cellIncrement, cellZeroing, nextMover } from '../store/gameReducer';\r\nimport { Player } from '../types';\r\n\r\nexport const checkCellsToOverflow = (state: GameState, dispatch: Dispatch<any>) => {\r\n    const cell = findOverflowCells(state.field);\r\n\r\n    if (cell) {\r\n        cloneCell(state, dispatch, cell)\r\n        setTimeout(() => checkCellsToOverflow(state, dispatch), 0)\r\n    }\r\n    else {\r\n        dispatch(nextMover());\r\n        dispatch(allowMoving())\r\n    }\r\n}\r\n\r\nconst findOverflowCells = (field: Cell[][]): Cell | undefined => {\r\n    for (const row of field) {\r\n        const cell = row.find((cell) => cell.count > 3);\r\n        if (cell) return cell;\r\n    }\r\n}\r\n\r\nconst cloneCell = (state: GameState, dispatch: Dispatch<any>, cell: Cell) => {\r\n    const player = cell.player;\r\n    const [x, y] = calcCellPositionById(cell.id);\r\n    const count = cell.count;\r\n\r\n    dispatch(cellZeroing(state.field[y][x].id));\r\n\r\n    if (count === 5)\r\n        cellIncAndCapture(dispatch, state.field[y][x].id, player)\r\n\r\n    if (y + 1 < fieldSize.y)\r\n        cellIncAndCapture(dispatch, state.field[y + 1][x].id, player)\r\n\r\n    if (x + 1 < fieldSize.x)\r\n        cellIncAndCapture(dispatch, state.field[y][x + 1].id, player)\r\n\r\n    if (y - 1 >= 0)\r\n        cellIncAndCapture(dispatch, state.field[y - 1][x].id, player)\r\n\r\n    if (x - 1 >= 0)\r\n        cellIncAndCapture(dispatch, state.field[y][x - 1].id, player)\r\n}\r\n\r\nconst cellIncAndCapture = (dispatch: Dispatch<any>, id: number, player: Player) => {\r\n    dispatch(cellCapture({ cellId: id, player: player }))\r\n    dispatch(cellIncrement(id));\r\n}\r\n\r\nexport const calcCellPositionById = (number: number) => [number % 10, Math.floor(number / 10)]\r\n\r\nexport const getNextMover = (player: Player) => Player[player + 1] ? ++player : 0;\r\n\r\nexport const playerIsExistOnGameField = (field: Cell[][], player: Player) => {\r\n    for (const row of field) {\r\n        const cell = row.find((cell) => cell.player === player);\r\n        if (cell) return true\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const createField = (size: Vector2): Cell[][] => {\r\n    return new Array(size.y).fill(1).map((a, i) => {\r\n        return (new Array(size.x).fill(1).map((b, j) => createCell(i * 10 + j)))\r\n    })\r\n}\r\n\r\nconst createCell = (id: number) => ({ id: id, count: 0, player: undefined })\r\n\r\nexport const placeSpawnPoint = (field: Cell[][], spawnPoints: SpawnPoint[]) => {\r\n    let newField = field;\r\n    spawnPoints.forEach((spawn) => {\r\n        newField[spawn.y][spawn.x].player = spawn.player;\r\n        newField[spawn.y][spawn.x].count = 3;\r\n    });\r\n    return newField;\r\n}","import { fieldSize, spawnPoints } from '../data';\r\nimport { calcCellPositionById, createField, placeSpawnPoint, playerIsExistOnGameField } from '../logic';\r\nimport { Player } from '../types';\r\nimport { CellZeroing, GameActions, GameActionType, CellIncrement, CellCapture, playerMoving, NextMover } from './types';\r\n\r\nconst defaultState = (): GameState => {\r\n    return {\r\n        field: placeSpawnPoint(createField(fieldSize), spawnPoints),\r\n        mover: Player.red,\r\n        moveBlock: false,\r\n        players: getPlayers()\r\n    }\r\n}\r\n\r\nconst getPlayers = () => [\r\n    Player.red,\r\n    Player.orange,\r\n    Player.yellow,\r\n    Player.green,\r\n    Player.blue\r\n]\r\n\r\nexport const gameReducer = (state = defaultState(), action: GameActions) => {\r\n    switch (action.type) {\r\n        case GameActionType.CELL_CAPTURE:\r\n            return actionCellCapture(state, action);\r\n        case GameActionType.CELL_INCREMENT:\r\n            return actionCellIncrement(state, action);\r\n        case GameActionType.CELL_ZEROING:\r\n            return actionCellZeroing(state, action);\r\n        case GameActionType.BLOCK_MOVING:\r\n            return { ...state, moveBlock: true };\r\n        case GameActionType.ALLOW_MOVING:\r\n            return { ...state, moveBlock: false };\r\n        case GameActionType.NEXT_MOVER:\r\n            return actionNextMover(state, action);\r\n        case GameActionType.RESTART_GAME:\r\n            return defaultState();\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nfunction getNext() {\r\n\r\n}\r\n\r\n/**\r\n * Action creators\r\n */\r\nexport const cellIncrement = (payload: number): GameActions => ({ type: GameActionType.CELL_INCREMENT, payload: payload })\r\nexport const cellZeroing = (payload: number): GameActions => ({ type: GameActionType.CELL_ZEROING, payload: payload })\r\nexport const cellCapture = (payload: playerMoving): GameActions => ({ type: GameActionType.CELL_CAPTURE, payload: payload })\r\nexport const nextMover = (): GameActions => ({ type: GameActionType.NEXT_MOVER, payload: undefined })\r\nexport const blockMoving = (): GameActions => ({ type: GameActionType.BLOCK_MOVING, payload: undefined })\r\nexport const allowMoving = (): GameActions => ({ type: GameActionType.ALLOW_MOVING, payload: undefined })\r\nexport const restartGame = (): GameActions => ({ type: GameActionType.RESTART_GAME, payload: undefined })\r\n\r\nfunction actionCellCapture(state: GameState, action: CellCapture) {\r\n    let newState = { ...state };\r\n    const [x, y] = calcCellPositionById(action.payload.cellId);\r\n\r\n    newState.field[y][x].player = action.payload.player;\r\n\r\n    return newState;\r\n}\r\n\r\nfunction actionCellIncrement(state: GameState, action: CellIncrement) {\r\n\r\n    let newState = { ...state };\r\n    const [x, y] = calcCellPositionById(action.payload);\r\n\r\n    newState.field[y][x].count += 1;\r\n\r\n    return newState;\r\n}\r\n\r\n\r\nfunction actionCellZeroing(state: GameState, action: CellZeroing) {\r\n    let newState = { ...state };\r\n    const [x, y] = calcCellPositionById(action.payload);\r\n\r\n    newState.field[y][x].count = 0;\r\n    newState.field[y][x].player = undefined;\r\n\r\n    return newState;\r\n}\r\n\r\nfunction actionNextMover(state: GameState, action: NextMover) {\r\n    const leftPlayers = [...state.players];\r\n    let curI = leftPlayers.indexOf(state.mover);\r\n    let nextMover = leftPlayers[curI + 1] ? leftPlayers[curI + 1] : 0;\r\n\r\n    while (leftPlayers.length > 1 && !playerIsExistOnGameField(state.field, nextMover)) {\r\n        curI = leftPlayers.indexOf(state.mover);\r\n        leftPlayers.splice(leftPlayers.indexOf(nextMover), 1);\r\n        nextMover = leftPlayers[curI + 1] ? leftPlayers[curI + 1] : 0;\r\n    }\r\n    return { ...state, mover: nextMover, players: leftPlayers };\r\n}","import { FC } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { blockMoving, cellIncrement, nextMover } from '../../store/gameReducer';\r\nimport { Player } from '../../types';\r\nimport styles from './CellItem.module.css';\r\n\r\ninterface Props {\r\n    cell: Cell;\r\n}\r\n\r\nconst CellItem: FC<Props> = ({ cell }) => {\r\n    const dispatch = useDispatch();\r\n    const state = useTypedSelector(state => state.game)\r\n\r\n    const getColorClass = (player: Player) => {\r\n        switch (player) {\r\n            case undefined: return styles.none;\r\n            case Player.red: return styles.red;\r\n            case Player.orange: return styles.orange;\r\n            case Player.yellow: return styles.yellow;\r\n            case Player.green: return styles.green;\r\n            case Player.blue: return styles.blue;\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    const click = () => {\r\n        if (state.moveBlock) return;\r\n        if (state.mover === cell.player) {\r\n            dispatch(cellIncrement(cell.id))\r\n\r\n            dispatch(blockMoving())\r\n        }\r\n    }\r\n    const createPoints = (count: number) => {\r\n        switch (count) {\r\n            case 0:\r\n                return '';\r\n            case 3:\r\n                return <><span>•</span><br /><span>•</span><span>•</span></>\r\n            case 4:\r\n                return <><span>•</span><span>•</span><br /><span>•</span><span>•</span></>\r\n            default:\r\n                return new Array(count).fill(' • ').join(' ');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={[styles.wrapper, state.mover === cell.player && !state.moveBlock ? styles.mover : ''].join(' ')} draggable=\"false\">\r\n            <div\r\n                className={[styles.content, getColorClass(cell.player)].join(' ')}\r\n                onClick={click}\r\n                draggable=\"false\"\r\n            >\r\n                <p>\r\n                    {createPoints(cell.count)}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CellItem\r\n","import { FC } from 'react'\nimport CellItem from '../Cell/CellItem'\nimport styles from './GameField.module.css'\n\ninterface Props {\n    field: Cell[][],\n}\n\nconst GameField: FC<Props> = ({ field }) => {\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.content}>\n                {field.map(row => (\n                    <div className={styles.row} key={Math.random()}>\n                        {row.map((cell) => (\n                            <CellItem cell={cell} key={cell.id}></CellItem>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default GameField\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport GameField from './components/GameField/GameField';\r\nimport './css/App.css';\r\nimport { useTypedSelector } from './hooks/useTypedSelector';\r\nimport { checkCellsToOverflow } from './logic';\r\nimport { restartGame } from './store/gameReducer';\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const state = useTypedSelector(state => state.game)\r\n\r\n    useEffect(() => {\r\n        if (state.moveBlock)\r\n            checkCellsToOverflow(state, dispatch)\r\n    }, [state.moveBlock])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"App__content\">\r\n                <GameField field={state.field}></GameField>\r\n                <button onClick={() => dispatch(restartGame())}>Restart</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { gameReducer } from './gameReducer';\n\nconst rootReducer = combineReducers({\n    game: gameReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools());\n\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}