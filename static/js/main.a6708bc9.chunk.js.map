{"version":3,"sources":["components/PlayersForm/PlayersForm.module.css","components/GameField/Cell/CellItem.module.css","components/ModalWindow/Popup.module.css","components/GameField/GameField.module.css","components/PlayersForm/ChosePlayerButton/ChosePlayerButton.module.css","css/colors.module.css","types/index.ts","hooks/useTypedSelector.ts","logic/functions.ts","logic/AI/simple.ts","logic/AI/normal.ts","logic/AI/index.ts","data/index.ts","store/types/index.ts","components/GameField/Cell/CellItem.tsx","components/GameField/GameField.tsx","components/ModalWindow/AlertPopup.tsx","store/actionCreator.ts","logic/index.ts","components/PlayersForm/ChosePlayerButton/ChosePlayerButton.tsx","components/PlayersForm/PlayersForm.tsx","store/gameFieldReducer.ts","App.tsx","store/gameStateReducer.ts","store/index.ts","index.tsx"],"names":["module","exports","Player","PlayerStatus","useTypedSelector","useSelector","find","field","cell","count","player","responce","filter","length","concat","calc","number","Math","floor","gameSettings","template","size","getNeighbors","reduce","acum","cur","max","map","c","create","id","allow","emptyCell","Array","fill","a","i","b","j","spawnPoint","spawnPoints","newField","forEach","spawn","y","x","fieldByTemplate","fieldTemplate","sizeX","sizeY","isExist","some","row","random","elemetFrom","object","isArray","Object","prototype","toString","call","keys","Error","cells","trying","func","onCatch","e","cellIsExist","pos","undefined","c1","state","gameState","mover","c3","filteredCells","c2","c4","b1","b2","difficulty","simple","normal","spawns","red","orange","blue","green","playersProfiles","bots","AI","getColorByPlayer","colors","GameActionType","CellItem","onMove","stl","wrapper","className","moveBlock","join","draggable","content","onClick","createPoints","GameField","styles","ModalWimdow","show","title","text","callback","buttonText","CSSTransition","unmountOnExit","in","timeout","classNames","mask","main","restartGame","type","RESTART_GAME","payload","checkCellsToOverflow","dispatch","CELL_CLONING","setTimeout","NEW_MOVE","aC","findStatusByPlayer","prf","status","ChosePlayerButton","playerStatus","position","setStatus","none","user","getIcon","PlayersForm","onSubmit","form","children","playersStatuses","push","useState","button","pStat","givenState","templete","actionCellCapture","captureInfo","cellId","newState","from","actionCellIncrement","actionCellZeroing","actionCloneCell","action","cellIncAndCapture","App","useDispatch","showM","setShowM","timer","setTimer","setTitle","winStatistic","setWinStatistic","move","gameStarted","PLAYER_MOVE","useEffect","android","botMoving","moveNumber","endGame","newWinStatistic","str","players","toUpperCase","slice","clearTimeout","filteredSpawns","START_GAME","actionNextMover","leftPlayers","currentMoverIndex","indexOf","newMover","actionNewMove","actionStartGame","rootReducer","combineReducers","CELL_CAPTURE","CELL_INCREMENT","CELL_ZEROING","BLOCK_MOVING","ALLOW_MOVING","NEXT_MOVER","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,6BAA6B,QAAU,6BAA6B,IAAM,yBAAyB,OAAS,8B,iBCAxID,EAAOC,QAAU,CAAC,QAAU,0BAA0B,QAAU,0BAA0B,KAAO,uBAAuB,IAAM,sBAAsB,OAAS,yBAAyB,OAAS,yBAAyB,MAAQ,wBAAwB,KAAO,uBAAuB,MAAQ,0B,gBCA9RD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,QAAU,uBAAuB,QAAU,uBAAuB,KAAO,sB,iBCAtHD,EAAOC,QAAU,CAAC,QAAU,2BAA2B,QAAU,2BAA2B,IAAM,yB,gBCAlGD,EAAOC,QAAU,CAAC,QAAU,mCAAmC,QAAU,mCAAmC,GAAK,8BAA8B,GAAK,8BAA8B,KAAO,kC,qBCAzLD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,IAAM,oBAAoB,OAAS,uBAAuB,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,uB,0VCDjKC,EAOAC,E,oDCJCC,EAAoDC,I,mCDHrDH,O,aAAAA,I,mBAAAA,I,mBAAAA,I,iBAAAA,I,gBAAAA,M,cAOAC,O,eAAAA,I,eAAAA,I,sBAAAA,M,yCEJCG,EACQ,SAACC,GAAqB,IAAD,gBAChBA,GADgB,IAClC,2BAAyB,CAAC,IAChBC,EADe,QACJF,MAAK,SAACE,GAAD,OAAUA,EAAKC,MAAQ,KAC7C,GAAID,EAAM,OAAOA,GAHa,gCAD7BF,EAOM,SAACC,EAAiBG,GAC7B,IADwD,EACpDC,EAAmB,GADiC,cAEtCJ,GAFsC,IAExD,2BAAyB,CAAC,IAChBC,EADe,QACJI,QAAO,SAACJ,GAAD,OAAUA,EAAKE,SAAWA,KAC9CF,EAAKK,OAAS,IAAGF,EAAWA,EAASG,OAAON,KAJI,8BAMxD,OAAOG,GAIFI,EAGS,SAACC,GAAD,MACd,CAACC,KAAKC,MAAMF,EAASG,EAAaC,SAASC,KAAK,IAAKL,EAASG,EAAaC,SAASC,KAAK,KAJpFN,EASU,SAACR,EAAiBC,GACjC,OAAOc,EAAaf,EAAOC,GAAMe,QAAO,SAACC,EAAMC,GAAP,OAA8B,OAAfA,EAAIf,OAAkBc,EAAO,EAAIA,IAAM,IAVzFT,EAec,SAACR,EAAiBC,GACrC,OAAOS,KAAKS,IAAL,MAAAT,KAAI,YACJK,EAAaf,EAAOC,GAAMmB,KAAI,SAAAC,GAAC,OAAIA,EAAElB,SAAWF,EAAKE,OAASkB,EAAEnB,MAAQ,QAK1EoB,EAAS,CAClBrB,KAAM,SAACsB,GAAD,MAAiB,CAAEA,GAAIA,EAAIrB,MAAO,EAAGC,OAAQ,KAAMqB,OAAO,IAChEC,UAAW,SAACF,GAAD,MAAiB,CAAEA,GAAIA,EAAIrB,MAAO,EAAGC,OAAQ,KAAMqB,OAAO,IACrExB,MAAO,SAACc,GACJ,OAAO,IAAIY,MAAMZ,EAAK,IAAIa,KAAK,GAAGP,KAAI,SAACQ,EAAGC,GACtC,OAAQ,IAAIH,MAAMZ,EAAK,IAAIa,KAAK,GAAGP,KAAI,SAACU,EAAGC,GAAJ,OAAUT,EAAOrB,KAAK4B,EAAIf,EAAK,GAAKiB,UAGnFC,WAAY,SAAChC,EAAiBiC,GAC1B,IAAIC,EAAWlC,EAKf,OAJAiC,EAAYE,SAAQ,SAACC,GACjBF,EAASE,EAAMC,GAAGD,EAAME,GAAGnC,OAASiC,EAAMjC,OAC1C+B,EAASE,EAAMC,GAAGD,EAAME,GAAGpC,MAAQ,KAEhCgC,GAEXK,gBAhBkB,SAgBFC,GAIZ,IAHA,kBAAuBA,EAAc1B,KAArC,GAAO2B,EAAP,KAAcC,EAAd,KACMR,EAAWZ,EAAOtB,MAAMwC,EAAc1B,MAEnCe,EAAI,EAAGA,EAAIY,EAAOZ,IACvB,IAAK,IAAIE,EAAI,EAAGA,EAAIW,EAAOX,IACnBS,EAAcxC,MAAM6B,GAAGE,GACvBG,EAASL,GAAGE,GAAKT,EAAOrB,KAAK4B,EAAIY,EAAQV,GAEzCG,EAASL,GAAGE,GAAKT,EAAOG,UAAUI,EAAIY,EAAQV,GAK1D,OAAOG,IAGFS,EACM,SAAC3C,EAAiBG,GAAlB,OACXH,EAAM4C,MAAK,SAACC,GAAD,QAASA,EAAID,MAAK,SAAC3C,GAAD,OAAUA,EAAKE,SAAWA,SAGlD2C,EAAS,CAClBC,WAAY,SAACC,GACT,GAAItB,MAAMuB,QAAQD,GACd,OAAOA,EAAOtC,KAAKC,MAAMD,KAAKoC,SAAWE,EAAO1C,SAE/C,GAAI4C,OAAOC,UAAUC,SAASC,KAAKL,GACpC,OAAOA,EAAOF,EAAOC,WAAWG,OAAOI,KAAKN,KAEhD,MAAM,IAAIO,MAAM,6CAIXlD,EACK,SAACmD,EAAetD,GAAhB,OAAkCsD,EAAMnD,QAAO,SAAAJ,GAAI,OAAIA,EAAKC,QAAUA,MAGxF,SAASuD,EAAOC,EAAgBC,GAC5B,IAAM,OAAOD,IAAS,MAAOE,GAAK,OAAOD,GAE7C,SAAS5C,EAAaf,EAAiBC,GACnC,MAAeO,EAAsBP,EAAKsB,IAA1C,mBAAOe,EAAP,KAAUD,EAAV,KACA,MAAO,CACHoB,GAAO,kBAAMzD,EAAMsC,EAAI,GAAGD,KAAI,MAC9BoB,GAAO,kBAAMzD,EAAMsC,GAAGD,EAAI,KAAI,MAC9BoB,GAAO,kBAAMzD,EAAMsC,EAAI,GAAGD,KAAI,MAC9BoB,GAAO,kBAAMzD,EAAMsC,GAAGD,EAAI,KAAI,OAChChC,QAAO,SAAAuD,GAAC,OAAIA,KAOX,SAASC,EAAY7D,EAAiB8D,GACzC,kBAAeA,EAAf,GAAOxB,EAAP,KAAUD,EAAV,KACA,QAAIoB,GAAO,kBAAMzD,EAAMsC,GAAGD,GAAGb,aAAOuC,GC7GjC,IAAMC,EAAK,SAACC,GACf,IAAMT,EAAQzD,EAAmBkE,EAAMjE,MAAOiE,EAAMC,UAAUC,OAE9D,OAAOrB,EAAOC,WAAWS,IAOhBY,EAAK,SAACH,GACf,IAAMT,EAAQzD,EAAmBkE,EAAMjE,MAAOiE,EAAMC,UAAUC,OACxDE,EAAgBhE,EAAoBmD,EAAO,GAEjD,OAAIa,EAAc/D,OAAS,EAChBwC,EAAOC,WAAWsB,GAElBvB,EAAOC,WAAWS,IAOpBc,EAAK,SAACL,GACf,IAAIT,EAAQzD,EAAmBkE,EAAMjE,MAAOiE,EAAMC,UAAUC,OACtDE,EAAgBhE,EAAoBmD,EAAO,GAC7Ca,EAAc/D,OAAS,IACvBkD,EAAQa,GAEZ,IANoC,eAM3BxC,GACL,GAAI2B,EAAMZ,MAAK,SAAA3C,GAAI,OAAIO,EAAuByD,EAAMjE,MAAOC,KAAU4B,KAEjE,OADA2B,EAAQA,EAAMnD,QAAO,SAACJ,GAAD,OAAUO,EAAuByD,EAAMjE,MAAOC,KAAU4B,KAC7E,SAHCA,EAAI,EAAGA,EAAI,EAAGA,IAAK,gBAAnBA,GAGD,MAIR,OAAOiB,EAAOC,WAAWS,IAMhBe,EAAK,SAACN,GAGf,IAFA,IAAMT,EAAQzD,EAAmBkE,EAAMjE,MAAOiE,EAAMC,UAAUC,OAErDtC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMwC,EAAgBhE,EAAoBmD,EAAO3B,GACjD,GAAIwC,EAAc/D,OAAS,EACvB,OAAOwC,EAAOC,WAAWsB,GAIjC,OAAOvB,EAAOC,WAAWS,ICrDhBgB,EAAK,SAACP,GACf,IAAMT,EAAQzD,EAAmBkE,EAAMjE,MAAOiE,EAAMC,UAAUC,OAE1DE,EAAgBhE,EAAoBmD,EAAO,GAG/C,OAFAa,EAAgBA,EAAchE,QAAO,SAACJ,GAAD,OAA4D,IAAlDO,EAA2ByD,EAAMjE,MAAOC,OAErEK,OAAS,EAChBwC,EAAOC,WAAWsB,GAGtBvB,EAAOC,WAAWS,IAMhBiB,EAAK,SAACR,GACf,IAAMT,EAAQzD,EAAmBkE,EAAMjE,MAAOiE,EAAMC,UAAUC,OAE1DE,EAAgBhE,EAAoBmD,EAAO,GAG/C,OAFAa,EAAgBA,EAAchE,QAAO,SAACJ,GAAD,OAA4D,IAAlDO,EAA2ByD,EAAMjE,MAAOC,GAAc,EAAI,MAEvFK,OAAS,IAI3B+D,EAAgBhE,EAAoBmD,EAAO,IAEzBlD,OAAS,EALhBwC,EAAOC,WAAWsB,GAQlBvB,EAAOC,WAAWS,IChClB,EACH,SAAUkB,GACd,OAAQA,GACJ,IAAK,SACD,OAAO5B,EAAOC,WAAW4B,GAC7B,IAAK,SACD,OAAO7B,EAAOC,WAAW6B,GAC7B,QAAS,SC4HRhE,EAA6B,CACtCC,SApI2C,CAC3C,CACIC,KAAM,CAAC,EAAG,GACVd,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7B6E,OAAQ,CACJ,CAAEvC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOmF,KAC7B,CAAExC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOoF,QAC7B,CAAEzC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOqF,MAC7B,CAAE1C,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOsF,SAGrC,CACInE,KAAM,CAAC,EAAG,GACVd,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7B6E,OAAQ,CACJ,CAAEvC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOmF,KAC7B,CAAExC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOoF,QAC7B,CAAEzC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOqF,MAC7B,CAAE1C,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOsF,SAGrC,CACInE,KAAM,CAAC,EAAG,GACVd,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7B6E,OAAQ,CACJ,CAAEvC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOmF,KAC7B,CAAExC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOoF,QAC7B,CAAEzC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOqF,MAC7B,CAAE1C,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOsF,SAGrC,CACInE,KAAM,CAAC,EAAG,GACVd,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7B6E,OAAQ,CACJ,CAAEvC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOmF,KAC7B,CAAExC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOoF,QAC7B,CAAEzC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOqF,MAC7B,CAAE1C,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOsF,SAGrC,CACInE,KAAM,CAAC,EAAG,GACVd,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7B6E,OAAQ,CACJ,CAAEvC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOmF,KAC7B,CAAExC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOoF,QAC7B,CAAEzC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOqF,MAC7B,CAAE1C,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOsF,SAGrC,CACInE,KAAM,CAAC,EAAG,GACVd,MAAO,CACH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7B6E,OAAQ,CACJ,CAAEvC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOmF,KAC7B,CAAExC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOoF,QAC7B,CAAEzC,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOqF,MAC7B,CAAE1C,EAAG,EAAGD,EAAG,EAAGlC,OAAQR,EAAOsF,UAcZ,GACzBC,gBAAiB,GACjBC,KAAM,CACFL,IAAKM,EAAUtC,EAAOC,WAAW,CAAC,SAAU,YAC5CgC,OAAQK,EAAUtC,EAAOC,WAAW,CAAC,SAAU,YAC/CkC,MAAOG,EAAUtC,EAAOC,WAAW,CAAC,SAAU,YAC9CiC,KAAMI,EAAUtC,EAAOC,WAAW,CAAC,SAAU,cAI9C,SAASsC,EAAiBlF,GAC7B,OAAOmF,IAAO3F,EAAOQ,I,IClJboF,E,OC+CGC,EAvCa,SAAC,GAAsB,IAApBvF,EAAmB,EAAnBA,KAAMwF,EAAa,EAAbA,OAC3BvB,EAAYrE,GAAiB,SAAAoE,GAAK,OAAIA,EAAMC,aAelD,OADmB,IAAfjE,EAAKC,OAA8BwF,IAAIC,QAEvC,qBAAKC,UACD,CACIF,IAAIC,QACJzB,EAAUC,QAAUlE,EAAKE,QAAW+D,EAAU2B,UAAwB,GAAZH,IAAIvB,OAChE2B,KAAK,KACPC,UAAU,QALd,SAOK9F,EAAKuB,OACF,qBACIoE,UAAW,CAACF,IAAIM,QAASX,EAAiBpF,EAAKE,SAAS2F,KAAK,KAC7DG,QAASR,GAAW,kBAAMA,EAAOxF,IACjC8F,UAAU,QAHd,SAKI,+BA3BK,SAAC7F,GAClB,OAAQA,GACJ,KAAK,EAAG,MAAO,GACf,KAAK,EAAG,OAAO,8CACf,KAAK,EAAG,OAAO,wDACf,KAAK,EAAG,OAAO,8CAAG,uBAAH,sBACf,KAAK,EAAG,OAAO,wDAAU,uBAAV,sBACf,KAAK,EAAG,OAAO,wDAAU,uBAAV,SAAiB,uBAAjB,sBACf,QAAS,MAAO,IAoBHgG,CAAajG,EAAKC,c,iBChB5BiG,EAhBc,SAAC,GAAuB,IAArBnG,EAAoB,EAApBA,MAAOyF,EAAa,EAAbA,OACnC,OACI,qBAAKG,UAAWQ,IAAOT,QAAvB,SACI,qBAAKC,UAAWQ,IAAOJ,QAAvB,SACKhG,EAAMoB,KAAI,SAAAyB,GAAG,OACV,qBAAK+C,UAAWQ,IAAOvD,IAAvB,SACKA,EAAIzB,KAAI,SAACnB,GAAD,OACL,cAAC,EAAD,CAAUA,KAAMA,EAAoBwF,OAAQA,GAAjBxF,EAAKsB,QAFPb,KAAKoC,kB,yBCuB3CuD,G,MAxBgB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAC3D,OACI,cAACC,EAAA,EAAD,CAAeC,eAAa,EAACC,GAAIP,EAAMQ,QAAS,IAAKC,WAAW,OAAhE,SACI,qBAAKnB,UAAWF,IAAIsB,KAApB,SACI,cAACL,EAAA,EAAD,CAAeE,GAAIP,EAAMQ,QAAS,IAAKC,WAAW,QAAlD,SACI,qBAAKnB,UAAWF,IAAIC,QAApB,SACI,sBAAKC,UAAWF,IAAIM,QAApB,UACI,sBAAKJ,UAAWF,IAAIuB,KAApB,UACI,6BACKV,IAEJC,GAAQ,4BAAIA,OAEjB,wBAAQZ,UAAU,MAAMK,QAAS,kBAAMQ,KAAvC,SACKC,GAA0B,qB,SHzB/CnB,K,4BAAAA,E,gCAAAA,E,4BAAAA,E,4BAAAA,E,oBAAAA,E,4BAAAA,E,4BAAAA,E,wBAAAA,E,wBAAAA,E,4BAAAA,E,2BAAAA,M,KIAL,IAWM2B,EAAc,iBAAoB,CAAEC,KAAM5B,EAAe6B,aAAcC,aAAStD,ICNhFuD,EAAuB,SAAvBA,EAAwBtH,EAAiBuH,GAClD,IDHwBF,ECGlBpH,EAAOF,EAAqBC,GAE9BC,GACAsH,GDNoBF,ECMIpH,EDN4B,CAAEkH,KAAM5B,EAAeiC,aAAcH,QAASA,KCOlGI,YAAW,kBAAMH,EAAqBtH,EAAOuH,KAAW,IAGxDA,EDLe,SAACF,GAAD,MAAqC,CAAEF,KAAM5B,EAAemC,SAAUL,QAASA,GCKrFM,CAAW3H,KA4B5B,SAAS4H,EAAmBzH,GAAiB,IAAD,EACxC,iBAAOS,EAAasE,gBAAgBnF,MAAK,SAAA8H,GAAG,OAAIA,EAAI1H,SAAWA,YAA/D,aAAO,EAAiE2H,O,wBCD7DC,GAhCsB,SAAC,GAAwC,IAAtC5H,EAAqC,EAArCA,OAAQ6H,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC1D,cAAgCD,GAAzBF,EAAP,KAAeI,EAAf,KAmBA,OACI,qBAAKtC,UAAW,CAACF,KAAIuC,GAAWvC,KAAIC,SAASG,KAAK,KAAlD,SACI,wBACIF,UAAW,CAACF,KAAIM,QALC8B,IAAWlI,EAAauI,KAAQ9C,EAAiBlF,GAAU,IAKlC2F,KAAK,KAC/CG,QAAS,iBAVuB,kBAA7BrG,EAAakI,EAAS,GACtBI,EAAUJ,EAAS,GACvBI,EAAUtI,EAAauI,OAM1B,SAnBR,WACI,OAAQL,GACJ,KAAKlI,EAAauI,KACd,MAAO,IACX,KAAKvI,EAAawI,KACd,MAAO,eACX,QACI,MAAM,gBAgBLC,Q,oBCMFC,GAjCgB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxCC,EAA4E,GAclF,OAbAA,EAAgBC,KAAKC,mBAAuBhJ,EAAauI,OACzDO,EAAgBC,KAAKC,mBAAuBhJ,EAAauI,OACzDO,EAAgBC,KAAKC,mBAAuBhJ,EAAauI,OACzDO,EAAgBC,KAAKC,mBAAuBhJ,EAAauI,OAWrD,qBAAKvC,UAAWF,KAAIC,QAApB,SACI,sBAAKC,UAAWF,KAAIM,QAApB,UACI,sBAAKJ,UAAWF,KAAI7C,IAApB,UACI,cAAC,GAAD,CAA2B1C,OAAQqI,EAAK,GAAGrI,OAAQ6H,aAAcU,EAAgB,GAAIT,SAAU,MAAvE,GACxB,cAAC,GAAD,CAA2B9H,OAAQqI,EAAK,GAAGrI,OAAQ6H,aAAcU,EAAgB,GAAIT,SAAU,MAAvE,MAE3BQ,EACD,sBAAK7C,UAAWF,KAAI7C,IAApB,UACI,cAAC,GAAD,CAA2B1C,OAAQqI,EAAK,GAAGrI,OAAQ6H,aAAcU,EAAgB,GAAIT,SAAU,QAAvE,GACxB,cAAC,GAAD,CAA2B9H,OAAQqI,EAAK,GAAGrI,OAAQ6H,aAAcU,EAAgB,GAAIT,SAAU,QAAvE,MAE5B,wBAAQrC,UAAW,CAAC,OAAQF,KAAImD,QAAQ/C,KAAK,KAAMG,QAAS,WAnBhEyC,EAAgBrI,QAAO,SAACyI,GAAD,OAAWA,EAAM,KAAOlJ,EAAauI,QAAM7H,OAAS,GAC3EiI,EAASC,EAAKpH,KAAI,SAACjB,EAAQ0B,GACvB,OAAO,2BAAK2G,EAAK3G,IAAjB,IAAqBiG,OAAQY,EAAgB7G,GAAG,UAiBhD,0BChCHkH,GAAa,SAACC,GAAD,OAAuC1H,EAAOU,WAAWV,EAAOiB,gBAAgByG,GAAWA,EAASnE,SAwB9H,SAASoE,GAAkBhF,EAAiBiF,GACxC,IAAKjF,EAAM3D,OAAQ,OAAO2D,EAE1B,MAAezD,EAAsB0I,EAAYC,QAAjD,mBAAO7G,EAAP,KAAUD,EAAV,KACM+G,EAAW1H,MAAM2H,KAAKpF,GAI5B,OAFAmF,EAAS9G,GAAGD,GAAZ,2BAAsB4B,EAAM3B,GAAGD,IAA/B,IAAmClC,OAAQ+I,EAAY/I,SAEhDiJ,EAGX,SAASE,GAAoBrF,EAAiBkF,GAC1C,IAAKlF,EAAM3D,OAAQ,OAAO2D,EAE1B,IAAMmF,EAAW1H,MAAM2H,KAAKpF,GAC5B,EAAezD,EAAsB2I,GAArC,mBAAO7G,EAAP,KAAUD,EAAV,KAIA,OAFA+G,EAAS9G,GAAGD,GAAZ,2BAAsB4B,EAAM3B,GAAGD,IAA/B,IAAmCnC,MAAOkJ,EAAS9G,GAAGD,GAAGnC,MAAQ,IAE1DkJ,EAIX,SAASG,GAAkBtF,EAAiBkF,GACxC,IAAKlF,EAAM3D,OAAQ,OAAO2D,EAE1B,IAAMmF,EAAW1H,MAAM2H,KAAKpF,GAC5B,EAAezD,EAAsB2I,GAArC,mBAAO7G,EAAP,KAAUD,EAAV,KAIA,OAFA+G,EAAS9G,GAAGD,GAAZ,2BAAsB4B,EAAM3B,GAAGD,IAA/B,IAAmCnC,MAAO,EAAGC,OAAQ,OAE9CiJ,EAGX,SAASI,GAAgBvF,EAAiBwF,GACtC,IAAKxF,EAAM3D,OAAQ,OAAO2D,EAE1B,IAAMmF,EAAW1H,MAAM2H,KAAKpF,GACtBhE,EAAOwJ,EAAOpC,QACpB,EAAe7G,EAAsBP,EAAKsB,IAA1C,mBAAOe,EAAP,KAAUD,EAAV,KAoBA,OAlBmB,IAAfpC,EAAKC,MACLkJ,EAAS9G,GAAGD,GAAZ,2BAAsB+G,EAAS9G,GAAGD,IAAlC,IAAsCnC,MAAO,IAE7CkJ,EAAS9G,GAAGD,GAAZ,2BAAsB+G,EAAS9G,GAAGD,IAAlC,IAAsCnC,MAAO,EAAGC,OAAQ,OAGxD0D,EAAYuF,EAAU,CAAC9G,EAAI,EAAGD,MAC9B+G,EAAS9G,EAAI,GAAGD,GAAKqH,GAAkBN,EAAS9G,EAAI,GAAGD,GAAIpC,EAAKE,SAEhE0D,EAAYuF,EAAU,CAAC9G,EAAGD,EAAI,MAC9B+G,EAAS9G,GAAGD,EAAI,GAAKqH,GAAkBN,EAAS9G,GAAGD,EAAI,GAAIpC,EAAKE,SAEhE0D,EAAYuF,EAAU,CAAC9G,EAAI,EAAGD,MAC9B+G,EAAS9G,EAAI,GAAGD,GAAKqH,GAAkBN,EAAS9G,EAAI,GAAGD,GAAIpC,EAAKE,SAEhE0D,EAAYuF,EAAU,CAAC9G,EAAGD,EAAI,MAC9B+G,EAAS9G,GAAGD,EAAI,GAAKqH,GAAkBN,EAAS9G,GAAGD,EAAI,GAAIpC,EAAKE,SAE7DiJ,EAGX,IAAMM,GAAoB,SAACzJ,EAAYE,GAEnC,OAAO,2BAAKF,GAAZ,IAAkBE,OAAQA,EAAQD,MAAOD,EAAKC,MAAQ,KCgC3CyJ,OA/Gf,WACI,IACMpC,EAAWqC,cACjB,EAA0BhB,oBAAkB,GAA5C,mBAAOiB,EAAP,KAAcC,EAAd,KACM7F,EAAQpE,GAAiB,SAAAoE,GAAK,OAAIA,KACxC,EAA0B2E,mBAAyBnB,YAAW,kBAAM,IAAG,IAAvE,mBAAOsC,EAAP,KAAcC,EAAd,KAEA,EAA0BpB,mBAAS,YAAnC,mBAAOrC,EAAP,KAAc0D,EAAd,KACA,EAAwCrB,mBAAS,CAC7C9D,IAAK,EACLC,OAAQ,EACRE,MAAO,EACPD,KAAM,IAJV,mBAAOkF,EAAP,KAAqBC,EAArB,KAkDA,SAASC,EAAKnK,GL7DQ,IAACoH,EK+DfpH,GACAgE,EAAMC,UAAUmG,cACfpG,EAAMC,UAAU2B,WACjB5B,EAAMC,UAAUC,QAAUlE,EAAKE,QAE/BoH,GLpEeF,EKoEQpH,ELpEwB,CAAEkH,KAAM5B,EAAe+E,YAAajD,QAASA,KKyFpG,OAvEAkD,qBAAU,WACFtG,EAAMC,UAAUmG,aAAepG,EAAMC,UAAU2B,WAC/CyB,EAAqBrD,EAAMjE,MAAOuH,KAEvC,CAACtD,EAAMC,UAAUmG,YAAapG,EAAMC,UAAU2B,YAEjD0E,qBAAU,WACNP,EAASvC,YAAW,kBAAM2C,EJlB3B,SAAmBnG,GACtB,IAAKA,EAAMC,UAAU2B,WAAa5B,EAAMC,UAAUmG,YAAa,CAC3D,IAAMlF,EAAOvE,EAAauE,KAC1B,OAAQlB,EAAMC,UAAUC,OACpB,KAAKxE,EAAOmF,IACR,GAAI8C,EAAmBjI,EAAOmF,OAASlF,EAAa4K,QAChD,OAAOrF,EAAKL,IAAIb,GACpB,MACJ,KAAKtE,EAAOoF,OACR,GAAI6C,EAAmBjI,EAAOoF,UAAYnF,EAAa4K,QACnD,OAAOrF,EAAKJ,OAAOd,GACvB,MACJ,KAAKtE,EAAOsF,MACR,GAAI2C,EAAmBjI,EAAOsF,SAAWrF,EAAa4K,QAClD,OAAOrF,EAAKF,MAAMhB,GACtB,MACJ,KAAKtE,EAAOqF,KACR,GAAI4C,EAAmBjI,EAAOqF,QAAUpF,EAAa4K,QACjD,OAAOrF,EAAKH,KAAKf,KIAEwG,CAAUxG,MArBjB,MAuBzB,CAACA,EAAMC,UAAUwG,WAAYzG,EAAMC,UAAUmG,cAEhDE,qBAAU,WACN,GAAItG,EAAMC,UAAUyG,QAAS,CACzB,IAAMC,EAAe,eAAQV,GAC7B,OAAQjG,EAAMC,UAAUC,OACpB,KAAKxE,EAAOmF,IACR8F,EAAgB9F,MAChB,MACJ,KAAKnF,EAAOoF,OACR6F,EAAgB7F,SAChB,MACJ,KAAKpF,EAAOsF,MACR2F,EAAgB3F,QAChB,MACJ,KAAKtF,EAAOqF,KACR4F,EAAgB5F,OAGxBmF,EAAgBS,GAChBX,EAAS,GAAD,QdmDIY,EclDGlL,EAAOsE,EAAMC,UAAU4G,QAAQ,IdmD/CD,EAAI,GAAGE,cAAgBF,EAAIG,MAAM,EAAGH,EAAIvK,ScpD/B,0HAEgB2D,EAAMC,UAAUwG,WAFhC,oCAIRZ,GAAS,Gd+Cd,IAAiBe,Ic5CjB,CAAC5G,EAAMC,UAAUyG,UAoChB,qBAAK/E,UAAU,MAAf,SACI,sBAAKA,UAAU,eAAf,UACI,cAAC,EAAD,CACIU,KAAMuD,EACNtD,MAAOA,EACPG,WAAW,UACXD,SAAU,kBAvCtBwE,aAAalB,GACbD,GAAS,QACTvC,EAASI,QAuCC1D,EAAMC,UAAUmG,YAMd,qCACI,cAAC,EAAD,CAAWrK,MAAOiE,EAAMjE,MAAOyF,OAAQ2E,IACvC,wBAAQxE,UAAU,MAAMK,QAAS,WA3BjDsB,EAASI,MA2BO,wBANJ,cAAC,GAAD,CAAaY,SA7B7B,SAAsBC,GAClB,ILrEkBnB,EKqEZ6D,EAAiBtK,EAAaC,SAASgE,OAAOxE,QAChD,SAAC+B,EAAOP,GAAR,OAAc2G,EAAK3G,GAAGiG,SAAWlI,EAAauI,QAElDvH,EAAasE,gBAAkBsD,EAC/BjB,GLzEkBF,EKyET,2BAAkBzG,EAAaC,UAA/B,IAAyCgE,OAAQqG,ILzEC,CAAE/D,KAAM5B,EAAe4F,WAAY9D,QAASA,MKiGtDmB,KAlB1C5H,EAAaC,SAASgE,OAAOzD,KAAI,SAACgB,GACrC,MAAO,CACHjC,OAAQiC,EAAMjC,OACd2H,OAAQlI,EAAauI,SAejB,SACI,cAAC,EAAD,CAAWnI,MAAO+I,GAAWnI,EAAaC,UAAW4E,OAAQ,uB,kBC9ErF,SAAS2F,GAAgBnH,EAAkBjE,GACvC,IAAMqL,EAAc,YAAIpH,EAAM6G,SAASzK,QAAO,SAACF,GAAD,OAAYwC,EAAsB3C,EAAOG,MACjFmL,EAAoBD,EAAYE,QAAQtH,EAAME,OAEhDqH,EAAWH,EADQC,EAAoB,EAAID,EAAY/K,OAASgL,EAAoB,EAAI,GAE5F,OAAO,2BAAKrH,GAAZ,IAAmBE,MAAOqH,EAAUV,QAASO,IAEjD,SAASI,GAAcxH,EAAkBjE,GACrC,GAAIiE,EAAM4B,WAAa5B,EAAMoG,cAAgBpG,EAAM0G,QAAS,CACxD,IAAMvB,EAAQ,2BACPgC,GAAgBnH,EAAOjE,IADhB,IAEV0K,WAAYzG,EAAMyG,WAAa,EAC/B7E,WAAW,IAMf,OAJgC,IAA5BuD,EAAS0B,QAAQxK,SACjB8I,EAASuB,SAAU,EACnBvB,EAASvD,WAAY,GAElBuD,EAEP,OAAOnF,EAGf,SAASyH,GAAgBzH,EAAkB+E,GACvC,IAAM8B,EAAoB9B,EAASnE,OAAOzD,KAAI,SAACgB,GAAD,OAAWA,EAAMjC,UAC/D,OAAO,2BAAK8D,GAAZ,IAAmB4B,WAAW,EAAOwE,aAAa,EAAMlG,MAAO2G,EAAQ,GAAIA,QAASA,ICtDxF,IAAMa,GAAcC,2BAAgB,CAChC5L,MHA4B,WAA4D,IAA3DiE,EAA0D,uDAFtD,GAEoBwF,EAAkC,uCACvF,OAAQA,EAAOtC,MACX,KAAK5B,EAAe4F,WAChB,OAAO1B,EAAOpC,QACR0B,GAAWU,EAAOpC,SANC,GAQ7B,KAAK9B,EAAesG,aAChB,OAAO5C,GAAkBhF,EAAOwF,EAAOpC,SAC3C,KAAK9B,EAAeuG,eAChB,OAAOxC,GAAoBrF,EAAOwF,EAAOpC,SAC7C,KAAK9B,EAAewG,aAChB,OAAOxC,GAAkBtF,EAAOwF,EAAOpC,SAC3C,KAAK9B,EAAeiC,aAChB,OAAOgC,GAAgBvF,EAAOwF,GAClC,KAAKlE,EAAe+E,YAChB,OAAOhB,GAAoBrF,EAAOwF,EAAOpC,QAAQ9F,IACrD,KAAKgE,EAAe6B,aAChB,MAnByB,GAoB7B,QACI,OAAOnD,IGlBfC,UDM4B,WAA6D,IAA5DD,EAA2D,uDATrD,CACnCoG,aAAa,EACbxE,WAAW,EACX8E,SAAS,EACTxG,MAAO,EACPuG,WAAY,EACZI,QAAS,IAG4CrB,EAAmC,uCACxF,OAAQA,EAAOtC,MACX,KAAK5B,EAAeyG,aAChB,OAAO,2BAAK/H,GAAZ,IAAmB4B,WAAW,IAClC,KAAKN,EAAe0G,aAChB,OAAO,2BAAKhI,GAAZ,IAAmB4B,WAAW,EAAO6E,WAAYzG,EAAMyG,WAAa,IACxE,KAAKnF,EAAemC,SAChB,OAAO+D,GAAcxH,EAAOwF,EAAOpC,SACvC,KAAK9B,EAAe2G,WAChB,OAAOd,GAAgBnH,EAAOwF,EAAOpC,SACzC,KAAK9B,EAAe+E,YAChB,OAAO,2BAAKrG,GAAZ,IAAmB4B,WAAW,IAClC,KAAKN,EAAe4F,WAChB,OAAOO,GAAgBzH,EAAOwF,EAAOpC,SACzC,KAAK9B,EAAe6B,aAChB,MAxB2B,CACnCiD,aAAa,EACbxE,WAAW,EACX8E,SAAS,EACTxG,MAAO,EACPuG,WAAY,EACZI,QAAS,IAmBL,QACI,OAAO7G,MCpBNkI,GAAQC,uBAAYT,GAAaU,kCCH9CC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.a6708bc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PlayersForm_wrapper__TTHCu\",\"content\":\"PlayersForm_content__333GC\",\"row\":\"PlayersForm_row__4M82w\",\"button\":\"PlayersForm_button__sU6Gu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CellItem_wrapper__1rAJ5\",\"content\":\"CellItem_content__2DAMM\",\"none\":\"CellItem_none__574jH\",\"red\":\"CellItem_red__3g3TO\",\"orange\":\"CellItem_orange__2j7Hc\",\"yellow\":\"CellItem_yellow__3uxu3\",\"green\":\"CellItem_green__VEVs5\",\"blue\":\"CellItem_blue__3zDKo\",\"mover\":\"CellItem_mover__RdWp7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mask\":\"Popup_mask__17XTj\",\"wrapper\":\"Popup_wrapper__2JNVu\",\"content\":\"Popup_content__1ynAw\",\"main\":\"Popup_main__1NpXR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GameField_wrapper__2kRGf\",\"content\":\"GameField_content__1_Sxb\",\"row\":\"GameField_row__3HD1i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ChosePlayerButton_wrapper__2Y62w\",\"content\":\"ChosePlayerButton_content__158zQ\",\"up\":\"ChosePlayerButton_up__2emgR\",\"go\":\"ChosePlayerButton_go__20d8A\",\"down\":\"ChosePlayerButton_down__IsGxp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"none\":\"colors_none__DDh7w\",\"red\":\"colors_red__2u9cS\",\"orange\":\"colors_orange__AzVyP\",\"yellow\":\"colors_yellow__39TPi\",\"green\":\"colors_green__19aDX\",\"blue\":\"colors_blue__AzYQz\"};","export enum Player {\r\n    red,\r\n    orange,\r\n    yellow,\r\n    green,\r\n    blue,\r\n}\r\nexport enum PlayerStatus {\r\n    none,\r\n    user,\r\n    android,\r\n}","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import { gameSettings } from \"../data\";\r\nimport { Player } from \"../types\";\r\n\r\nexport const find = {\r\n    overflowingCell: (field: Cell[][]) => {\r\n        for (const row of field) {\r\n            const cell = row.find((cell) => cell.count > 3);\r\n            if (cell) return cell;\r\n        }\r\n    },\r\n    cellsByPlayer: (field: Cell[][], player: Player): Cell[] => {\r\n        let responce: Cell[] = [];\r\n        for (const row of field) {\r\n            const cell = row.filter((cell) => cell.player === player);\r\n            if (cell.length > 0) responce = responce.concat(cell);\r\n        }\r\n        return responce;\r\n    },\r\n}\r\n\r\nexport const calc = {\r\n    nextMover: (player: Player) => Player[player + 1] ? ++player : 0,\r\n\r\n    cellPositionById: (number: number) =>\r\n        [Math.floor(number / gameSettings.template.size[0]), number % gameSettings.template.size[0]],\r\n\r\n    amountCellWithPoints: (cells: Cell[], count: number) =>\r\n        cells.reduce((acum, cur) => cur.count === count ? acum + 1 : acum, 0),\r\n\r\n    amountEmptyNeighs: (field: Cell[][], cell: Cell) => {\r\n        return getNeighbors(field, cell).reduce((acum, cur) => cur.player === null ? acum + 1 : acum, 0);;\r\n    },\r\n    maxNeighsCount: (field: Cell[][], cell: Cell) => {\r\n        return Math.max(...getNeighbors(field, cell).map(c => c.count))\r\n    },\r\n    maxNeighsEnemiesCount: (field: Cell[][], cell: Cell) => {\r\n        return Math.max(\r\n            ...getNeighbors(field, cell).map(c => c.player !== cell.player ? c.count : 0)\r\n        )\r\n    }\r\n}\r\n\r\nexport const create = {\r\n    cell: (id: number) => ({ id: id, count: 0, player: null, allow: true }),\r\n    emptyCell: (id: number) => ({ id: id, count: 0, player: null, allow: false }),\r\n    field: (size: Vector2): Cell[][] => {\r\n        return new Array(size[1]).fill(1).map((a, i) => {\r\n            return (new Array(size[0]).fill(1).map((b, j) => create.cell(i * size[0] + j)))\r\n        })\r\n    },\r\n    spawnPoint: (field: Cell[][], spawnPoints: SpawnPoint[]) => {\r\n        let newField = field;\r\n        spawnPoints.forEach((spawn) => {\r\n            newField[spawn.y][spawn.x].player = spawn.player;\r\n            newField[spawn.y][spawn.x].count = 3;\r\n        });\r\n        return newField;\r\n    },\r\n    fieldByTemplate(fieldTemplate: FieldTemplate) {\r\n        const [sizeX, sizeY] = fieldTemplate.size;\r\n        const newField = create.field(fieldTemplate.size);\r\n\r\n        for (let i = 0; i < sizeX; i++) {\r\n            for (let j = 0; j < sizeY; j++) {\r\n                if (fieldTemplate.field[i][j]) {\r\n                    newField[i][j] = create.cell(i * sizeX + j);\r\n                } else {\r\n                    newField[i][j] = create.emptyCell(i * sizeX + j);\r\n                }\r\n            }\r\n        }\r\n\r\n        return newField;\r\n    }\r\n}\r\nexport const isExist = {\r\n    playerOnField: (field: Cell[][], player: Player) =>\r\n        field.some((row) => row.some((cell) => cell.player === player) ? true : false)\r\n}\r\n\r\nexport const random = {\r\n    elemetFrom: (object: Array<any> | Object | any): any => {\r\n        if (Array.isArray(object))\r\n            return object[Math.floor(Math.random() * object.length)]\r\n\r\n        else if (Object.prototype.toString.call(object))\r\n            return object[random.elemetFrom(Object.keys(object))];\r\n\r\n        throw new Error(\"The argument is not an array or object.\");\r\n    },\r\n}\r\n\r\nexport const filter = {\r\n    cellsByCount: (cells: Cell[], count: number) => cells.filter(cell => cell.count === count),\r\n}\r\n\r\nfunction trying(func: Function, onCatch: any) {\r\n    try { return func() } catch (e) { return onCatch }\r\n}\r\nfunction getNeighbors(field: Cell[][], cell: Cell): Cell[] {\r\n    const [x, y] = calc.cellPositionById(cell.id);\r\n    return [\r\n        trying(() => field[x + 1][y], null),\r\n        trying(() => field[x][y + 1], null),\r\n        trying(() => field[x - 1][y], null),\r\n        trying(() => field[x][y - 1], null),\r\n    ].filter(e => e);\r\n}\r\n\r\nexport function upFirst(str: string) {\r\n    return str[0].toUpperCase() + str.slice(1, str.length);\r\n}\r\n\r\nexport function cellIsExist(field: Cell[][], pos: Vector2) {\r\n    const [x, y] = pos;\r\n    if (trying(() => field[x][y].allow, undefined))\r\n        return true;\r\n    else\r\n        return false;\r\n}","import { RootState } from \"../../store\";\r\nimport { calc, filter, find, random } from \"../functions\";\r\n\r\n/**\r\n * Random movement\r\n */\r\nexport const c1 = (state: RootState) => {\r\n    const cells = find.cellsByPlayer(state.field, state.gameState.mover)\r\n\r\n    return random.elemetFrom(cells);\r\n}\r\n\r\n\r\n/**\r\n * Three count priority mover\r\n */\r\nexport const c3 = (state: RootState) => {\r\n    const cells = find.cellsByPlayer(state.field, state.gameState.mover)\r\n    const filteredCells = filter.cellsByCount(cells, 3);\r\n\r\n    if (filteredCells.length > 0) {\r\n        return random.elemetFrom(filteredCells);\r\n    } else {\r\n        return random.elemetFrom(cells);;\r\n    }\r\n}\r\n\r\n/**\r\n * Expander & three count priority mover\r\n */\r\nexport const c2 = (state: RootState) => {\r\n    let cells = find.cellsByPlayer(state.field, state.gameState.mover)\r\n    const filteredCells = filter.cellsByCount(cells, 3);\r\n    if (filteredCells.length > 0)\r\n        cells = filteredCells;\r\n\r\n    for (let i = 4; i > 0; i--) {\r\n        if (cells.some(cell => calc.amountEmptyNeighs(state.field, cell) === i)) {\r\n            cells = cells.filter((cell) => calc.amountEmptyNeighs(state.field, cell) === i);\r\n            break;\r\n        }\r\n    }\r\n\r\n    return random.elemetFrom(cells);\r\n}\r\n\r\n/**\r\n * Accumulator, big Bang\r\n */\r\nexport const c4 = (state: RootState) => {\r\n    const cells = find.cellsByPlayer(state.field, state.gameState.mover)\r\n\r\n    for (let i = 1; i < 3; i++) {\r\n        const filteredCells = filter.cellsByCount(cells, i);\r\n        if (filteredCells.length > 0) {\r\n            return random.elemetFrom(filteredCells);\r\n        }\r\n    }\r\n\r\n    return random.elemetFrom(cells);\r\n}\r\n\r\n","import { RootState } from \"../../store\";\r\nimport { calc, filter, find, random } from \"../functions\";\r\n\r\n/**\r\n * Priority for capturing enemy cells with three dots, if they are next to their own cells with three dots.\r\n */\r\nexport const b1 = (state: RootState) => {\r\n    const cells = find.cellsByPlayer(state.field, state.gameState.mover)\r\n\r\n    let filteredCells = filter.cellsByCount(cells, 3);\r\n    filteredCells = filteredCells.filter((cell) => calc.maxNeighsEnemiesCount(state.field, cell) === 3 ? true : false)\r\n\r\n    if (filteredCells.length > 0) {\r\n        return random.elemetFrom(filteredCells);\r\n    }\r\n\r\n    return random.elemetFrom(cells);\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport const b2 = (state: RootState) => {\r\n    const cells = find.cellsByPlayer(state.field, state.gameState.mover)\r\n\r\n    let filteredCells = filter.cellsByCount(cells, 3);\r\n    filteredCells = filteredCells.filter((cell) => calc.maxNeighsEnemiesCount(state.field, cell) === 3 ? 1 : 0)\r\n\r\n    if (filteredCells.length > 0) {\r\n        return random.elemetFrom(filteredCells);\r\n    }\r\n\r\n    filteredCells = filter.cellsByCount(cells, 3);\r\n\r\n    if (filteredCells.length > 0) {\r\n        return random.elemetFrom(filteredCells);\r\n    } else {\r\n        return random.elemetFrom(cells);;\r\n    }\r\n}","import { random } from \"../functions\";\r\nimport * as simple from \"./simple\";\r\nimport * as normal from \"./normal\";\r\n\r\n\r\nexport default {\r\n    getBot: function (difficulty: string) {\r\n        switch (difficulty) {\r\n            case \"simple\":\r\n                return random.elemetFrom(simple);\r\n            case \"normal\":\r\n                return random.elemetFrom(normal);\r\n            default: return;\r\n        }\r\n    }\r\n}","import { Player } from '../types';\r\nimport colors from '../css/colors.module.css';\r\nimport AI from '../logic/AI';\r\nimport { random } from '../logic/functions';\r\n\r\nexport const fieldTemplates: FieldTemplate[] = [\r\n    {\r\n        size: [9, 9],\r\n        field: [\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n        ],\r\n        spawns: [\r\n            { x: 1, y: 1, player: Player.red },\r\n            { x: 7, y: 1, player: Player.orange },\r\n            { x: 1, y: 7, player: Player.blue },\r\n            { x: 7, y: 7, player: Player.green },\r\n        ]\r\n    },\r\n    {\r\n        size: [9, 9],\r\n        field: [\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        ],\r\n        spawns: [\r\n            { x: 2, y: 2, player: Player.red },\r\n            { x: 6, y: 2, player: Player.orange },\r\n            { x: 2, y: 6, player: Player.blue },\r\n            { x: 6, y: 6, player: Player.green },\r\n        ]\r\n    },\r\n    {\r\n        size: [9, 9],\r\n        field: [\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 0, 0, 0, 1, 1, 1],\r\n            [1, 1, 1, 0, 0, 0, 1, 1, 1],\r\n            [1, 1, 1, 0, 0, 0, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 0],\r\n        ],\r\n        spawns: [\r\n            { x: 1, y: 1, player: Player.red },\r\n            { x: 7, y: 1, player: Player.orange },\r\n            { x: 1, y: 7, player: Player.blue },\r\n            { x: 7, y: 7, player: Player.green },\r\n        ]\r\n    },\r\n    {\r\n        size: [9, 9],\r\n        field: [\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 0, 0, 1, 1, 1, 0, 0, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n        ],\r\n        spawns: [\r\n            { x: 1, y: 1, player: Player.red },\r\n            { x: 7, y: 1, player: Player.orange },\r\n            { x: 1, y: 7, player: Player.blue },\r\n            { x: 7, y: 7, player: Player.green },\r\n        ]\r\n    },\r\n    {\r\n        size: [9, 9],\r\n        field: [\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [0, 1, 1, 0, 0, 0, 1, 1, 0],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n        ],\r\n        spawns: [\r\n            { x: 1, y: 1, player: Player.red },\r\n            { x: 7, y: 1, player: Player.orange },\r\n            { x: 1, y: 7, player: Player.blue },\r\n            { x: 7, y: 7, player: Player.green },\r\n        ]\r\n    },\r\n    {\r\n        size: [9, 9],\r\n        field: [\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 0, 1, 1, 1, 1],\r\n        ],\r\n        spawns: [\r\n            { x: 1, y: 1, player: Player.red },\r\n            { x: 7, y: 1, player: Player.orange },\r\n            { x: 1, y: 7, player: Player.blue },\r\n            { x: 7, y: 7, player: Player.green },\r\n        ]\r\n    },\r\n]\r\n\r\nexport const profileData: PlayerData[] = []\r\n\r\ninterface PlayerData {\r\n    name: string;\r\n    player: Player;\r\n    isUser: boolean;\r\n}\r\n\r\nexport const gameSettings: GameSettings = {\r\n    template: fieldTemplates[0],\r\n    playersProfiles: [],\r\n    bots: {\r\n        red: AI.getBot(random.elemetFrom(['normal', 'simple'])),\r\n        orange: AI.getBot(random.elemetFrom(['normal', 'simple'])),\r\n        green: AI.getBot(random.elemetFrom(['normal', 'simple'])),\r\n        blue: AI.getBot(random.elemetFrom(['normal', 'simple'])),\r\n    }\r\n}\r\n\r\nexport function getColorByPlayer(player: Player) {\r\n    return colors[Player[player]];\r\n}\r\n\r\ninterface GameSettings {\r\n    template: FieldTemplate,\r\n    playersProfiles: PlayerProfile[],\r\n    bots: Bots,\r\n}\r\n\r\ninterface Bots {\r\n    red: Function;\r\n    orange: Function;\r\n    green: Function;\r\n    blue: Function;\r\n}","import { Player } from '../../types';\r\n\r\nexport enum GameActionType {\r\n    CELL_CAPTURE = 'CELL_CAPTURE',\r\n    CELL_INCREMENT = 'CELL_INCREMENT',\r\n    CELL_ZEROING = 'CELL_ZEROING',\r\n    CELL_CLONING = 'CELL_CLONING',\r\n    NEW_MOVE = 'NEW_MOVE',\r\n    BLOCK_MOVING = 'BLOCK_MOVING',\r\n    ALLOW_MOVING = 'ALLOW_MOVING',\r\n    NEXT_MOVER = 'NEXT_MOVER',\r\n    START_GAME = 'START_GAME',\r\n    RESTART_GAME = 'RESTART_GAME',\r\n    PLAYER_MOVE = 'PLAYER_MOVE',\r\n}\r\n\r\n/**\r\n * Interfaces of actions\r\n */\r\nexport interface PlayerMove {\r\n    type: GameActionType.PLAYER_MOVE;\r\n    payload: Cell;\r\n}\r\nexport interface NewMove {\r\n    type: GameActionType.NEW_MOVE;\r\n    payload: Cell[][];\r\n}\r\n\r\nexport interface CellCapture {\r\n    type: GameActionType.CELL_CAPTURE;\r\n    payload: playerMoving;\r\n}\r\nexport interface CellIncrement {\r\n    type: GameActionType.CELL_INCREMENT;\r\n    payload: number;\r\n}\r\nexport interface CellZeroing {\r\n    type: GameActionType.CELL_ZEROING;\r\n    payload: number;\r\n}\r\n\r\nexport interface CellCloning {\r\n    type: GameActionType.CELL_CLONING;\r\n    payload: Cell;\r\n}\r\n\r\nexport interface BlockMoving {\r\n    type: GameActionType.BLOCK_MOVING;\r\n    payload: undefined;\r\n}\r\n\r\nexport interface AllowMoving {\r\n    type: GameActionType.ALLOW_MOVING;\r\n    payload: undefined;\r\n}\r\nexport interface NextMover {\r\n    type: GameActionType.NEXT_MOVER;\r\n    payload: Cell[][];\r\n}\r\nexport interface RestartGame {\r\n    type: GameActionType.RESTART_GAME;\r\n    payload: undefined;\r\n}\r\nexport interface StartGame {\r\n    type: GameActionType.START_GAME;\r\n    payload: FieldTemplate;\r\n}\r\nexport type GameActions = CellZeroing\r\n    | PlayerMove\r\n    | NewMove\r\n    | StartGame\r\n    | RestartGame\r\n    | CellIncrement\r\n    | CellCapture\r\n    | CellCloning\r\n    | NextMover\r\n    | BlockMoving\r\n    | AllowMoving;\r\n\r\nexport interface playerMoving {\r\n    cellId: number;\r\n    player: Player;\r\n}","import { FC } from 'react'\r\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\r\nimport stl from './CellItem.module.css';\r\nimport { getColorByPlayer } from '../../../data';\r\n\r\ninterface Props {\r\n    cell: Cell;\r\n    onMove?: Function;\r\n}\r\n\r\nconst CellItem: FC<Props> = ({ cell, onMove }) => {\r\n    const gameState = useTypedSelector(state => state.gameState)\r\n\r\n    const createPoints = (count: number) => {\r\n        switch (count) {\r\n            case 0: return '';\r\n            case 1: return <>•</>\r\n            case 2: return <>•&nbsp;•</>\r\n            case 3: return <>•<br />•&nbsp;•</>\r\n            case 4: return <>•&nbsp;•<br />•&nbsp;•</>\r\n            case 5: return <>•&nbsp;•<br />•<br />•&nbsp;•</>\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    if (cell.count === 0) (<div className={stl.wrapper} draggable=\"false\"></div>)\r\n    return (\r\n        <div className={\r\n            [\r\n                stl.wrapper,\r\n                gameState.mover === cell.player && !gameState.moveBlock ? stl.mover : ''\r\n            ].join(' ')}\r\n            draggable=\"false\"\r\n        >\r\n            {cell.allow &&\r\n                <div\r\n                    className={[stl.content, getColorByPlayer(cell.player)].join(' ')}\r\n                    onClick={onMove && (() => onMove(cell))}\r\n                    draggable=\"false\"\r\n                >\r\n                    <span>\r\n                        {createPoints(cell.count)}\r\n                    </span>\r\n                </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CellItem\r\n","import { FC } from 'react'\r\nimport CellItem from './Cell/CellItem'\r\nimport styles from './GameField.module.css'\r\n\r\ninterface Props {\r\n    field: Cell[][],\r\n    onMove?: Function;\r\n}\r\n\r\nconst GameField: FC<Props> = ({ field, onMove }) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.content}>\r\n                {field.map(row => (\r\n                    <div className={styles.row} key={Math.random()}>\r\n                        {row.map((cell) => (\r\n                            <CellItem cell={cell} key={cell.id} onMove={onMove} />\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameField\r\n","import { FC } from 'react'\r\nimport stl from './Popup.module.css'\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport \"../../css/popup.css\"\r\n\r\ninterface Props {\r\n    show: boolean;\r\n    callback: Function;\r\n    title: string;\r\n    text?: string;\r\n    buttonText?: string;\r\n}\r\n\r\nconst ModalWimdow: FC<Props> = ({ show, title, text, callback, buttonText }) => {\r\n    return (\r\n        <CSSTransition unmountOnExit in={show} timeout={500} classNames=\"mask\">\r\n            <div className={stl.mask} >\r\n                <CSSTransition in={show} timeout={500} classNames=\"popup\">\r\n                    <div className={stl.wrapper}>\r\n                        <div className={stl.content}>\r\n                            <div className={stl.main}>\r\n                                <h2>\r\n                                    {title}\r\n                                </h2>\r\n                                {text && <p>{text}</p>}\r\n                            </div>\r\n                            <button className='btn' onClick={() => callback()}>\r\n                                {buttonText ? buttonText : \"Ok\"}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </CSSTransition>\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\nexport default ModalWimdow\r\n","import { GameActions, GameActionType, playerMoving } from \"./types\";\r\n\r\nexport const cellIncrement = (payload: number): GameActions => ({ type: GameActionType.CELL_INCREMENT, payload: payload });\r\nexport const cellZeroing = (payload: number): GameActions => ({ type: GameActionType.CELL_ZEROING, payload: payload });\r\nexport const cellCapture = (payload: playerMoving): GameActions => ({ type: GameActionType.CELL_CAPTURE, payload: payload });\r\nexport const CellCloning = (payload: Cell): GameActions => ({ type: GameActionType.CELL_CLONING, payload: payload });\r\n\r\nexport const nextMover = (payload: Cell[][]): GameActions => ({ type: GameActionType.NEXT_MOVER, payload: payload });\r\nexport const blockMoving = (): GameActions => ({ type: GameActionType.BLOCK_MOVING, payload: undefined });\r\nexport const allowMoving = (): GameActions => ({ type: GameActionType.ALLOW_MOVING, payload: undefined });\r\nexport const newMove = (payload: Cell[][]): GameActions => ({ type: GameActionType.NEW_MOVE, payload: payload });\r\nexport const playerMove = (payload: Cell): GameActions => ({ type: GameActionType.PLAYER_MOVE, payload: payload });\r\n\r\nexport const restartGame = (): GameActions => ({ type: GameActionType.RESTART_GAME, payload: undefined });\r\nexport const startGame = (payload: FieldTemplate): GameActions => ({ type: GameActionType.START_GAME, payload: payload });\r\n","import { Dispatch } from 'react';\r\nimport { find, random } from './functions';\r\nimport * as aC from '../store/actionCreator'\r\nimport { RootState } from '../store';\r\nimport { gameSettings } from '../data';\r\nimport { Player, PlayerStatus } from '../types';\r\n\r\nexport const checkCellsToOverflow = (field: Cell[][], dispatch: Dispatch<any>) => {\r\n    const cell = find.overflowingCell(field);\r\n\r\n    if (cell) {\r\n        dispatch(aC.CellCloning(cell));\r\n        setTimeout(() => checkCellsToOverflow(field, dispatch), 0)\r\n    } else {\r\n\r\n        dispatch(aC.newMove(field));\r\n    }\r\n}\r\nexport function botMoving(state: RootState): Cell | undefined {\r\n    if (!state.gameState.moveBlock && state.gameState.gameStarted) {\r\n        const bots = gameSettings.bots;\r\n        switch (state.gameState.mover) {\r\n            case Player.red:\r\n                if (findStatusByPlayer(Player.red) === PlayerStatus.android)\r\n                    return bots.red(state);\r\n                break;\r\n            case Player.orange:\r\n                if (findStatusByPlayer(Player.orange) === PlayerStatus.android)\r\n                    return bots.orange(state);\r\n                break;\r\n            case Player.green:\r\n                if (findStatusByPlayer(Player.green) === PlayerStatus.android)\r\n                    return bots.green(state);\r\n                break;\r\n            case Player.blue:\r\n                if (findStatusByPlayer(Player.blue) === PlayerStatus.android)\r\n                    return bots.blue(state);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction findStatusByPlayer(player: Player) {\r\n    return gameSettings.playersProfiles.find(prf => prf.player === player)?.status;\r\n}","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport { getColorByPlayer } from '../../../data'\r\nimport { Player, PlayerStatus } from '../../../types'\r\nimport stl from './ChosePlayerButton.module.css'\r\n\r\ninterface Props {\r\n    player: Player;\r\n    playerStatus: [PlayerStatus, Dispatch<SetStateAction<PlayerStatus>>];\r\n    position: \"up\" | \"down\";\r\n}\r\n\r\nconst ChosePlayerButton: FC<Props> = ({ player, playerStatus, position }) => {\r\n    const [status, setStatus] = [...playerStatus];\r\n\r\n    function getIcon() {\r\n        switch (status) {\r\n            case PlayerStatus.none:\r\n                return \"?\"\r\n            case PlayerStatus.user:\r\n                return \"🙂\"\r\n            default:\r\n                return `🤖`\r\n        }\r\n    }\r\n    function nextStatus() {\r\n        if (typeof PlayerStatus[status + 1] === \"string\")\r\n            return setStatus(status + 1);\r\n        return setStatus(PlayerStatus.none);\r\n    }\r\n    const getColorStyle = () => (status !== PlayerStatus.none) ? getColorByPlayer(player) : '';\r\n\r\n    return (\r\n        <div className={[stl[position], stl.wrapper].join(' ')}>\r\n            <button\r\n                className={[stl.content, getColorStyle()].join(' ')}\r\n                onClick={() => nextStatus()}\r\n            >\r\n                {getIcon()}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChosePlayerButton\r\n","import { Dispatch, FC, SetStateAction, useState } from 'react'\r\nimport { PlayerStatus } from '../../types'\r\nimport ChosePlayerButton from './ChosePlayerButton/ChosePlayerButton'\r\nimport stl from './PlayersForm.module.css'\r\n\r\ninterface Props {\r\n    onSubmit: Function;\r\n    form: PlayerProfile[];\r\n}\r\n\r\nconst PlayersForm: FC<Props> = ({ onSubmit, form, children }) => {\r\n    const playersStatuses: [PlayerStatus, Dispatch<SetStateAction<PlayerStatus>>][] = [];\r\n    playersStatuses.push(useState<PlayerStatus>(PlayerStatus.none))\r\n    playersStatuses.push(useState<PlayerStatus>(PlayerStatus.none))\r\n    playersStatuses.push(useState<PlayerStatus>(PlayerStatus.none))\r\n    playersStatuses.push(useState<PlayerStatus>(PlayerStatus.none))\r\n\r\n    function submit() {\r\n        if (playersStatuses.filter((pStat) => pStat[0] !== PlayerStatus.none).length > 1) {\r\n            onSubmit(form.map((player, i) => {\r\n                return { ...form[i], status: playersStatuses[i][0] };\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={stl.wrapper}>\r\n            <div className={stl.content}>\r\n                <div className={stl.row}>\r\n                    <ChosePlayerButton key={0} player={form[0].player} playerStatus={playersStatuses[0]} position={'up'} />\r\n                    <ChosePlayerButton key={1} player={form[1].player} playerStatus={playersStatuses[1]} position={'up'} />\r\n                </div>\r\n                {children}\r\n                <div className={stl.row}>\r\n                    <ChosePlayerButton key={2} player={form[2].player} playerStatus={playersStatuses[2]} position={'down'} />\r\n                    <ChosePlayerButton key={3} player={form[3].player} playerStatus={playersStatuses[3]} position={'down'} />\r\n                </div>\r\n                <button className={['btn ', stl.button].join(' ')} onClick={() => submit()}>Start!</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayersForm\r\n","import { calc, create, cellIsExist } from '../logic/functions';\r\nimport { Player } from '../types';\r\nimport { GameActions, GameActionType, CellCloning, playerMoving } from './types';\r\n\r\nconst defaultState = (): Cell[][] => []\r\nexport const givenState = (templete: FieldTemplate): Cell[][] => create.spawnPoint(create.fieldByTemplate(templete), templete.spawns)\r\nexport const gameFieldReducer = (state = defaultState(), action: GameActions): Cell[][] => {\r\n    switch (action.type) {\r\n        case GameActionType.START_GAME:\r\n            return action.payload\r\n                ? givenState(action.payload)\r\n                : defaultState();\r\n        case GameActionType.CELL_CAPTURE:\r\n            return actionCellCapture(state, action.payload);\r\n        case GameActionType.CELL_INCREMENT:\r\n            return actionCellIncrement(state, action.payload);\r\n        case GameActionType.CELL_ZEROING:\r\n            return actionCellZeroing(state, action.payload);\r\n        case GameActionType.CELL_CLONING:\r\n            return actionCloneCell(state, action);\r\n        case GameActionType.PLAYER_MOVE:\r\n            return actionCellIncrement(state, action.payload.id);\r\n        case GameActionType.RESTART_GAME:\r\n            return defaultState();\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nfunction actionCellCapture(state: Cell[][], captureInfo: playerMoving) {\r\n    if (!state.length) return state;\r\n\r\n    const [x, y] = calc.cellPositionById(captureInfo.cellId);\r\n    const newState = Array.from(state);\r\n\r\n    newState[x][y] = { ...state[x][y], player: captureInfo.player };\r\n\r\n    return newState;\r\n}\r\n\r\nfunction actionCellIncrement(state: Cell[][], cellId: number) {\r\n    if (!state.length) return state;\r\n\r\n    const newState = Array.from(state);\r\n    const [x, y] = calc.cellPositionById(cellId);\r\n\r\n    newState[x][y] = { ...state[x][y], count: newState[x][y].count + 1 };\r\n\r\n    return newState;\r\n}\r\n\r\n\r\nfunction actionCellZeroing(state: Cell[][], cellId: number) {\r\n    if (!state.length) return state;\r\n\r\n    const newState = Array.from(state);\r\n    const [x, y] = calc.cellPositionById(cellId);\r\n\r\n    newState[x][y] = { ...state[x][y], count: 0, player: null };\r\n\r\n    return newState;\r\n}\r\n\r\nfunction actionCloneCell(state: Cell[][], action: CellCloning) {\r\n    if (!state.length) return state;\r\n\r\n    const newState = Array.from(state);\r\n    const cell = action.payload;\r\n    const [x, y] = calc.cellPositionById(cell.id);\r\n\r\n    if (cell.count === 5) {\r\n        newState[x][y] = { ...newState[x][y], count: 1 }\r\n    } else {\r\n        newState[x][y] = { ...newState[x][y], count: 0, player: null }\r\n    }\r\n\r\n    if (cellIsExist(newState, [x + 1, y]))\r\n        newState[x + 1][y] = cellIncAndCapture(newState[x + 1][y], cell.player);\r\n\r\n    if (cellIsExist(newState, [x, y + 1]))\r\n        newState[x][y + 1] = cellIncAndCapture(newState[x][y + 1], cell.player);\r\n\r\n    if (cellIsExist(newState, [x - 1, y]))\r\n        newState[x - 1][y] = cellIncAndCapture(newState[x - 1][y], cell.player);\r\n\r\n    if (cellIsExist(newState, [x, y - 1]))\r\n        newState[x][y - 1] = cellIncAndCapture(newState[x][y - 1], cell.player);\r\n\r\n    return newState;\r\n}\r\n\r\nconst cellIncAndCapture = (cell: Cell, player: Player): Cell => {\r\n\r\n    return { ...cell, player: player, count: cell.count + 1 }\r\n}","import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from './hooks/useTypedSelector';\r\nimport './css/App.css';\r\nimport GameField from './components/GameField/GameField';\r\nimport ModalWimdow from './components/ModalWindow/AlertPopup';\r\nimport * as aC from './store/actionCreator'\r\nimport { botMoving, checkCellsToOverflow } from './logic';\r\nimport { Player, PlayerStatus } from './types';\r\nimport PlayersForm from './components/PlayersForm/PlayersForm';\r\nimport { gameSettings } from './data';\r\nimport { givenState } from './store/gameFieldReducer';\r\nimport { upFirst } from './logic/functions';\r\n\r\nfunction App() {\r\n    const BOT_MOVING_INTERVAL = 0;\r\n    const dispatch = useDispatch()\r\n    const [showM, setShowM] = useState<boolean>(false);\r\n    const state = useTypedSelector(state => state)\r\n    const [timer, setTimer] = useState<NodeJS.Timeout>(setTimeout(() => 0, 0))\r\n    // eslint-disable-next-line\r\n    const [title, setTitle] = useState(\"User win\")\r\n    const [winStatistic, setWinStatistic] = useState({\r\n        red: 0,\r\n        orange: 0,\r\n        green: 0,\r\n        blue: 0,\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (state.gameState.gameStarted && state.gameState.moveBlock) {\r\n            checkCellsToOverflow(state.field, dispatch)\r\n        }\r\n    }, [state.gameState.gameStarted, state.gameState.moveBlock])\r\n\r\n    useEffect(() => {\r\n        setTimer(setTimeout(() => move(botMoving(state)), BOT_MOVING_INTERVAL));\r\n        // eslint - disable - next - line\r\n    }, [state.gameState.moveNumber, state.gameState.gameStarted])\r\n\r\n    useEffect(() => {\r\n        if (state.gameState.endGame) {\r\n            const newWinStatistic = { ...winStatistic }\r\n            switch (state.gameState.mover) {\r\n                case Player.red:\r\n                    newWinStatistic.red++;\r\n                    break;\r\n                case Player.orange:\r\n                    newWinStatistic.orange++;\r\n                    break;\r\n                case Player.green:\r\n                    newWinStatistic.green++;\r\n                    break;\r\n                case Player.blue:\r\n                    newWinStatistic.blue++;\r\n                    break;\r\n            }\r\n            setWinStatistic(newWinStatistic);\r\n            setTitle(\r\n                `${upFirst(Player[state.gameState.players[0]])}\r\n                одержал победу за ${state.gameState.moveNumber} ходов`\r\n            );\r\n            setShowM(true)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [state.gameState.endGame])\r\n\r\n    function hideModal() {\r\n        clearTimeout(timer)\r\n        setShowM(false)\r\n        dispatch(aC.restartGame());\r\n    }\r\n    function move(cell: Cell | undefined) {\r\n        if (\r\n            cell &&\r\n            state.gameState.gameStarted &&\r\n            !state.gameState.moveBlock &&\r\n            state.gameState.mover === cell.player\r\n        ) {\r\n            dispatch(aC.playerMove(cell))\r\n        }\r\n    }\r\n    function gameStarting(form: PlayerProfile[]) {\r\n        const filteredSpawns = gameSettings.template.spawns.filter(\r\n            (spawn, i) => form[i].status !== PlayerStatus.none\r\n        )\r\n        gameSettings.playersProfiles = form;\r\n        dispatch(aC.startGame({ ...gameSettings.template, spawns: filteredSpawns }));\r\n    }\r\n    function gameRestarting() {\r\n        dispatch(aC.restartGame())\r\n    }\r\n    function createPlayersForm(): PlayerProfile[] {\r\n        return gameSettings.template.spawns.map((spawn) => {\r\n            return {\r\n                player: spawn.player,\r\n                status: PlayerStatus.none,\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"App__content\">\r\n                <ModalWimdow\r\n                    show={showM}\r\n                    title={title}\r\n                    buttonText=\"Restart\"\r\n                    callback={() => hideModal()}\r\n                />\r\n                {!state.gameState.gameStarted\r\n                    ?\r\n                    <PlayersForm onSubmit={gameStarting} form={createPlayersForm()}>\r\n                        <GameField field={givenState(gameSettings.template)} onMove={() => { }} />\r\n                    </PlayersForm>\r\n                    :\r\n                    <>\r\n                        <GameField field={state.field} onMove={move} />\r\n                        <button className='btn' onClick={() => gameRestarting()}>Restart</button>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { isExist } from '../logic/functions';\r\nimport { Player } from '../types';\r\nimport { GameActions, GameActionType } from './types';\r\n\r\nconst defaultState = (): GameState => ({\r\n    gameStarted: false,\r\n    moveBlock: true,\r\n    endGame: false,\r\n    mover: 0,\r\n    moveNumber: 0,\r\n    players: [],\r\n})\r\n\r\nexport const gameStateReducer = (state = defaultState(), action: GameActions): GameState => {\r\n    switch (action.type) {\r\n        case GameActionType.BLOCK_MOVING:\r\n            return { ...state, moveBlock: true };\r\n        case GameActionType.ALLOW_MOVING:\r\n            return { ...state, moveBlock: false, moveNumber: state.moveNumber + 1 };\r\n        case GameActionType.NEW_MOVE:\r\n            return actionNewMove(state, action.payload);\r\n        case GameActionType.NEXT_MOVER:\r\n            return actionNextMover(state, action.payload);\r\n        case GameActionType.PLAYER_MOVE:\r\n            return { ...state, moveBlock: true };\r\n        case GameActionType.START_GAME:\r\n            return actionStartGame(state, action.payload)\r\n        case GameActionType.RESTART_GAME:\r\n            return defaultState();\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nfunction actionNextMover(state: GameState, field: Cell[][]) {\r\n    const leftPlayers = [...state.players].filter((player) => isExist.playerOnField(field, player));\r\n    const currentMoverIndex = leftPlayers.indexOf(state.mover);\r\n    const nextMoverIndex = currentMoverIndex + 1 < leftPlayers.length ? currentMoverIndex + 1 : 0;\r\n    let newMover = leftPlayers[nextMoverIndex];\r\n    return { ...state, mover: newMover, players: leftPlayers };\r\n}\r\nfunction actionNewMove(state: GameState, field: Cell[][]) {\r\n    if (state.moveBlock && state.gameStarted && !state.endGame) {\r\n        const newState = {\r\n            ...actionNextMover(state, field),\r\n            moveNumber: state.moveNumber + 1,\r\n            moveBlock: false\r\n        };\r\n        if (newState.players.length === 1) {\r\n            newState.endGame = true;\r\n            newState.moveBlock = true;\r\n        }\r\n        return newState;\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\nfunction actionStartGame(state: GameState, templete: FieldTemplate) {\r\n    const players: Player[] = templete.spawns.map((spawn) => spawn.player);\r\n    return { ...state, moveBlock: false, gameStarted: true, mover: players[0], players: players };\r\n}","import { combineReducers, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { gameFieldReducer } from './gameFieldReducer';\r\nimport { gameStateReducer } from './gameStateReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    field: gameFieldReducer,\r\n    gameState: gameStateReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// test fieldSize"],"sourceRoot":""}