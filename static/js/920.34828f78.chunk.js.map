{"version":3,"file":"static/js/920.34828f78.chunk.js","mappings":"uJAGaA,E,QAAoDC,E,8ICFjE,EAA+B,oEAA/B,EAA2G,sDAA3G,EAA0K,0DAA1K,EAAgR,gCAAhR,EAAiU,yCAAjU,EAA2X,yCAA3X,EAAmb,mECD5a,SAASC,EAAaC,EAAcC,GACvC,OAAOC,KAAKC,UAAUH,KAAUE,KAAKC,UAAUF,EAClD,C,uBCuGD,EA/F6B,WACzB,IAAQG,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWT,EAAAA,EAAAA,IAAiB,SAAAU,GAAK,OAAIA,EAAMD,QAAV,IACjCE,GAAWC,EAAAA,EAAAA,MACjB,GAA4CC,EAAAA,EAAAA,UAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAgDF,EAAAA,EAAAA,UAAS,GAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KAGMC,EAAwB,kBAC1BhB,GACIiB,EAAAA,EAAAA,GAAmBL,EAAgBE,GACnCP,EAHsB,EAyB9B,OAnBAW,EAAAA,EAAAA,YAAU,WACNL,EAAkBN,EAASK,eAC9B,GAAE,CAACL,EAASK,kBACbM,EAAAA,EAAAA,YAAU,WACNH,EAAoBR,EAASO,iBAChC,GAAE,CAACP,EAASO,oBAeT,iBAAKK,UAAWC,EAAhB,WACI,4BACI,eAAID,UAAWC,EAAf,uBACA,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,uBACA,iBAAKD,UAAWC,EAAhB,WACI,kBACIC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,MAAOZ,EACPa,SAAU,SAAAC,GAAK,OACXb,GAAmBa,EAAMC,OAAOH,MADrB,KAInB,gBAAKL,UAAWC,EAAhB,SACKR,WAIb,iBAAKO,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,oCAGA,iBAAKD,UAAWC,EAAhB,WACI,kBACIC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,MAAOV,EACPW,SAAU,SAAAC,GAAK,OACXX,GAAqBW,EAAMC,OAAOH,MADvB,KAInB,gBAAKL,UAAWC,EAAhB,SACKN,cAKjB,mBACIK,UAAWC,EACXQ,QAvDZ,WACInB,GAASoB,EAAAA,EAAAA,MACZ,EAsDWC,SAtEmB9B,EAAa+B,EAAAA,EAAiBxB,GAmErD,sBAOA,mBACIY,UAAWC,EACXQ,QA1DZ,WACI,IAAMI,EAAc,CAChBpB,eAAgBA,EAChBE,iBAAkBA,GAEtBL,GAASwB,EAAAA,EAAAA,IAAYD,GACxB,EAqDWF,SAAUd,IAHd,oBAOA,mBAAQG,UAAWC,EAAeQ,QAASvB,EAA3C,SACMW,IAAqC,OAAX,aAI3C,C,6OC/FYkB,EAAW,SAACC,GAAD,MAAqC,CACzDd,KAAMe,EAAAA,EAAAA,UACND,QAASA,EAFW,EAIXE,EAAc,iBAAoB,CAC3ChB,KAAMe,EAAAA,EAAAA,aACND,aAASG,EAFc,EAIdC,EAAY,SAACJ,GAAD,MAAqC,CAC1Dd,KAAMe,EAAAA,EAAAA,WACND,QAASA,EAFY,EAMZK,EAAc,SAACL,GAAD,MAAiC,CACxDd,KAAMe,EAAAA,EAAAA,aACND,QAASA,EAFc,EAMdM,EAAU,SAACN,GAAD,MAAqC,CACxDd,KAAMe,EAAAA,EAAAA,UACND,QAASA,EAFU,EAIVO,EAAa,SAACP,GAAD,MAAiC,CACvDd,KAAMe,EAAAA,EAAAA,YACND,QAASA,EAFa,EAMbN,EAAgB,iBAAuB,CAChDR,KAAMsB,EAAAA,EAAAA,iBACNR,aAASG,EAFgB,EAIhBL,EAAc,SAACE,GAAD,MAA4C,CACnEd,KAAMsB,EAAAA,EAAAA,YACNR,QAASA,EAFc,C","sources":["hooks/useTypedSelector.ts","webpack://points-client/./src/pages/MainMenu/Settings/MainMenuSettings.module.css?0aa3","utils/helpers/objectsEqual.ts","pages/MainMenu/Settings/MainMenuSettings.tsx","store/actionCreator.ts"],"sourcesContent":["import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"page_wrapper\":\"MainMenuSettings_page_wrapper__-w9Bg MainMenu_page_wrapper__MgJgo\",\"title\":\"MainMenuSettings_title__BjzfG MainMenu_title__Xjuzu\",\"button\":\"MainMenuSettings_button__fbS6k components_button__Oqs6L\",\"row\":\"MainMenuSettings_row__FFT7A\",\"block\":\"MainMenuSettings_block__JfvnX\",\"interval_title\":\"MainMenuSettings_interval_title__rqoK5\",\"interval_value\":\"MainMenuSettings_interval_value__36mF4\",\"interval_row\":\"MainMenuSettings_interval_row__kLEZ- MainMenuSettings_row__FFT7A\"};","export function objectsEqual(objA: object, objB: object): boolean {\r\n    return JSON.stringify(objA) === JSON.stringify(objB);\r\n}\r\n","import { FC, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\r\nimport { resetSettings, setSettings } from '../../../store/actionCreator';\r\nimport { defaultSettings } from '../../../store/reducers/gameSettingReducer';\r\nimport styles from './MainMenuSettings.module.css';\r\nimport { objectsEqual } from '../../../utils/helpers/objectsEqual';\r\nimport { createGameSettings } from '../../../utils/core/constructors/createGameSettings';\r\n\r\nconst MainMenuSettings: FC = () => {\r\n    const { goBack } = useHistory();\r\n    const settings = useTypedSelector(state => state.settings);\r\n    const dispatch = useDispatch();\r\n    const [botMovingDelay, setBotMovingDelay] = useState(0);\r\n    const [cellCloningDelay, setCellCloningDelay] = useState(0);\r\n\r\n    const isDefaultSetting = () => objectsEqual(defaultSettings, settings);\r\n    const existUnappliedChanges = () =>\r\n        objectsEqual(\r\n            createGameSettings(botMovingDelay, cellCloningDelay),\r\n            settings\r\n        );\r\n\r\n    useEffect(() => {\r\n        setBotMovingDelay(settings.botMovingDelay);\r\n    }, [settings.botMovingDelay]);\r\n    useEffect(() => {\r\n        setCellCloningDelay(settings.cellCloningDelay);\r\n    }, [settings.cellCloningDelay]);\r\n\r\n    function resetToDefault() {\r\n        dispatch(resetSettings());\r\n    }\r\n\r\n    function applyChanges() {\r\n        const newSettings = {\r\n            botMovingDelay: botMovingDelay,\r\n            cellCloningDelay: cellCloningDelay\r\n        };\r\n        dispatch(setSettings(newSettings));\r\n    }\r\n\r\n    return (\r\n        <div className={styles.page_wrapper}>\r\n            <div>\r\n                <h2 className={styles.title}>Settings</h2>\r\n                <div className={styles.block}>\r\n                    <div className={styles.interval_title}>AI delay</div>\r\n                    <div className={styles.interval_row}>\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max=\"500\"\r\n                            value={botMovingDelay}\r\n                            onChange={event =>\r\n                                setBotMovingDelay(+event.target.value)\r\n                            }\r\n                        />\r\n                        <div className={styles.interval_value}>\r\n                            {botMovingDelay}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.block}>\r\n                    <div className={styles.interval_title}>\r\n                        Clone animation delay\r\n                    </div>\r\n                    <div className={styles.interval_row}>\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max=\"500\"\r\n                            value={cellCloningDelay}\r\n                            onChange={event =>\r\n                                setCellCloningDelay(+event.target.value)\r\n                            }\r\n                        />\r\n                        <div className={styles.interval_value}>\r\n                            {cellCloningDelay}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button\r\n                className={styles.button}\r\n                onClick={resetToDefault}\r\n                disabled={isDefaultSetting()}\r\n            >\r\n                Default\r\n            </button>\r\n            <button\r\n                className={styles.button}\r\n                onClick={applyChanges}\r\n                disabled={existUnappliedChanges()}\r\n            >\r\n                Apply\r\n            </button>\r\n            <button className={styles.button} onClick={goBack}>\r\n                {!existUnappliedChanges() ? 'Cancel' : 'Back'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainMenuSettings;\r\n","import {\r\n    GameActions,\r\n    GameActionType,\r\n    SettingActions,\r\n    SettingActionType\r\n} from './types';\r\n\r\n// common\r\nexport const loadGame = (payload: SaveData): GameActions => ({\r\n    type: GameActionType.LOAD_GAME,\r\n    payload: payload\r\n});\r\nexport const restartGame = (): GameActions => ({\r\n    type: GameActionType.RESTART_GAME,\r\n    payload: undefined\r\n});\r\nexport const startGame = (payload: GameForm): GameActions => ({\r\n    type: GameActionType.START_GAME,\r\n    payload: payload\r\n});\r\n\r\n// gameFieldReducer\r\nexport const cellCloning = (payload: Cell): GameActions => ({\r\n    type: GameActionType.CELL_CLONING,\r\n    payload: payload\r\n});\r\n\r\n// gameStateReducer\r\nexport const newMove = (payload: Cell[][]): GameActions => ({\r\n    type: GameActionType.NEXT_MOVE,\r\n    payload: payload\r\n});\r\nexport const playerMove = (payload: Cell): GameActions => ({\r\n    type: GameActionType.PLAYER_MOVE,\r\n    payload: payload\r\n});\r\n\r\n// gameSettingReducer\r\nexport const resetSettings = (): SettingActions => ({\r\n    type: SettingActionType.RESET_TO_DEFAULT,\r\n    payload: undefined\r\n});\r\nexport const setSettings = (payload: GameSettings): SettingActions => ({\r\n    type: SettingActionType.SET_SETTING,\r\n    payload: payload\r\n});\r\n"],"names":["useTypedSelector","useSelector","objectsEqual","objA","objB","JSON","stringify","goBack","useHistory","settings","state","dispatch","useDispatch","useState","botMovingDelay","setBotMovingDelay","cellCloningDelay","setCellCloningDelay","existUnappliedChanges","createGameSettings","useEffect","className","styles","type","min","max","value","onChange","event","target","onClick","resetSettings","disabled","defaultSettings","newSettings","setSettings","loadGame","payload","GameActionType","restartGame","undefined","startGame","cellCloning","newMove","playerMove","SettingActionType"],"sourceRoot":""}